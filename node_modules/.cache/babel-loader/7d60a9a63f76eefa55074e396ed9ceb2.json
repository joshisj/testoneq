{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortAutoValueFunctions = sortAutoValueFunctions;\nexports.default = void 0;\n\nvar _getPositionsForAutoValue = _interopRequireDefault(require(\"./getPositionsForAutoValue\"));\n\nvar _AutoValueRunner = _interopRequireDefault(require(\"./AutoValueRunner\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @method sortAutoValueFunctions\n * @private\n * @param {Array} autoValueFunctions - Array of objects to be sorted\n * @returns {Array} Sorted array\n *\n * Stable sort of the autoValueFunctions (preserves order at the same field depth).\n */\n\n\nfunction sortAutoValueFunctions(autoValueFunctions) {\n  var defaultFieldOrder = autoValueFunctions.reduce(function (acc, _ref, index) {\n    var fieldName = _ref.fieldName;\n    acc[fieldName] = index;\n    return acc;\n  }, {}); // Sort by how many dots each field name has, asc, such that we can auto-create\n  // objects and arrays before we run the autoValues for properties within them.\n  // Fields of the same level (same number of dots) preserve should order from the original array.\n\n  return autoValueFunctions.sort(function (a, b) {\n    var depthDiff = a.fieldName.split('.').length - b.fieldName.split('.').length;\n    return depthDiff === 0 ? defaultFieldOrder[a.fieldName] - defaultFieldOrder[b.fieldName] : depthDiff;\n  });\n}\n/**\n * @method setAutoValues\n * @private\n * @param {Array} autoValueFunctions - An array of objects with func, fieldName, and closestSubschemaFieldName props\n * @param {MongoObject} mongoObject\n * @param {Boolean} [isModifier=false] - Is it a modifier doc?\n * @param {Object} [extendedAutoValueContext] - Object that will be added to the context when calling each autoValue function\n * @returns {undefined}\n *\n * Updates doc with automatic values from autoValue functions or default\n * values from defaultValue. Modifies the referenced object in place.\n */\n\n\nfunction setAutoValues(autoValueFunctions, mongoObject, isModifier, isUpsert, extendedAutoValueContext) {\n  var sortedAutoValueFunctions = sortAutoValueFunctions(autoValueFunctions);\n  sortedAutoValueFunctions.forEach(function (_ref2) {\n    var func = _ref2.func,\n        fieldName = _ref2.fieldName,\n        closestSubschemaFieldName = _ref2.closestSubschemaFieldName;\n    var avRunner = new _AutoValueRunner.default({\n      closestSubschemaFieldName: closestSubschemaFieldName,\n      extendedAutoValueContext: extendedAutoValueContext,\n      func: func,\n      isModifier: isModifier,\n      isUpsert: isUpsert,\n      mongoObject: mongoObject\n    });\n    var positions = (0, _getPositionsForAutoValue.default)({\n      fieldName: fieldName,\n      isModifier: isModifier,\n      mongoObject: mongoObject\n    }); // Run the autoValue function once for each place in the object that\n    // has a value or that potentially should.\n\n    positions.forEach(avRunner.runForPosition.bind(avRunner));\n  });\n}\n\nvar _default = setAutoValues;\nexports.default = _default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/oneq-account/oneq-prod/node_modules/simpl-schema/dist/clean/setAutoValues.js"],"names":["Object","defineProperty","exports","value","sortAutoValueFunctions","default","_getPositionsForAutoValue","_interopRequireDefault","require","_AutoValueRunner","obj","__esModule","autoValueFunctions","defaultFieldOrder","reduce","acc","_ref","index","fieldName","sort","a","b","depthDiff","split","length","setAutoValues","mongoObject","isModifier","isUpsert","extendedAutoValueContext","sortedAutoValueFunctions","forEach","_ref2","func","closestSubschemaFieldName","avRunner","positions","runForPosition","bind","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC;AACAF,OAAO,CAACG,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,yBAAyB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAtD;;AAEA,IAAIC,gBAAgB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA7C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEL,IAAAA,OAAO,EAAEK;AAAX,GAArC;AAAwD;AAE/F;;;;;;;;;;AAQA,SAASN,sBAAT,CAAgCQ,kBAAhC,EAAoD;AAClD,MAAIC,iBAAiB,GAAGD,kBAAkB,CAACE,MAAnB,CAA0B,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAC5E,QAAIC,SAAS,GAAGF,IAAI,CAACE,SAArB;AACAH,IAAAA,GAAG,CAACG,SAAD,CAAH,GAAiBD,KAAjB;AACA,WAAOF,GAAP;AACD,GAJuB,EAIrB,EAJqB,CAAxB,CADkD,CAK1C;AACR;AACA;;AAEA,SAAOH,kBAAkB,CAACO,IAAnB,CAAwB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC7C,QAAIC,SAAS,GAAGF,CAAC,CAACF,SAAF,CAAYK,KAAZ,CAAkB,GAAlB,EAAuBC,MAAvB,GAAgCH,CAAC,CAACH,SAAF,CAAYK,KAAZ,CAAkB,GAAlB,EAAuBC,MAAvE;AACA,WAAOF,SAAS,KAAK,CAAd,GAAkBT,iBAAiB,CAACO,CAAC,CAACF,SAAH,CAAjB,GAAiCL,iBAAiB,CAACQ,CAAC,CAACH,SAAH,CAApE,GAAoFI,SAA3F;AACD,GAHM,CAAP;AAID;AACD;;;;;;;;;;;;;;AAcA,SAASG,aAAT,CAAuBb,kBAAvB,EAA2Cc,WAA3C,EAAwDC,UAAxD,EAAoEC,QAApE,EAA8EC,wBAA9E,EAAwG;AACtG,MAAIC,wBAAwB,GAAG1B,sBAAsB,CAACQ,kBAAD,CAArD;AACAkB,EAAAA,wBAAwB,CAACC,OAAzB,CAAiC,UAAUC,KAAV,EAAiB;AAChD,QAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,QACIf,SAAS,GAAGc,KAAK,CAACd,SADtB;AAAA,QAEIgB,yBAAyB,GAAGF,KAAK,CAACE,yBAFtC;AAGA,QAAIC,QAAQ,GAAG,IAAI1B,gBAAgB,CAACJ,OAArB,CAA6B;AAC1C6B,MAAAA,yBAAyB,EAAEA,yBADe;AAE1CL,MAAAA,wBAAwB,EAAEA,wBAFgB;AAG1CI,MAAAA,IAAI,EAAEA,IAHoC;AAI1CN,MAAAA,UAAU,EAAEA,UAJ8B;AAK1CC,MAAAA,QAAQ,EAAEA,QALgC;AAM1CF,MAAAA,WAAW,EAAEA;AAN6B,KAA7B,CAAf;AAQA,QAAIU,SAAS,GAAG,CAAC,GAAG9B,yBAAyB,CAACD,OAA9B,EAAuC;AACrDa,MAAAA,SAAS,EAAEA,SAD0C;AAErDS,MAAAA,UAAU,EAAEA,UAFyC;AAGrDD,MAAAA,WAAW,EAAEA;AAHwC,KAAvC,CAAhB,CAZgD,CAgB5C;AACJ;;AAEAU,IAAAA,SAAS,CAACL,OAAV,CAAkBI,QAAQ,CAACE,cAAT,CAAwBC,IAAxB,CAA6BH,QAA7B,CAAlB;AACD,GApBD;AAqBD;;AAED,IAAII,QAAQ,GAAGd,aAAf;AACAvB,OAAO,CAACG,OAAR,GAAkBkC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortAutoValueFunctions = sortAutoValueFunctions;\nexports.default = void 0;\n\nvar _getPositionsForAutoValue = _interopRequireDefault(require(\"./getPositionsForAutoValue\"));\n\nvar _AutoValueRunner = _interopRequireDefault(require(\"./AutoValueRunner\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @method sortAutoValueFunctions\n * @private\n * @param {Array} autoValueFunctions - Array of objects to be sorted\n * @returns {Array} Sorted array\n *\n * Stable sort of the autoValueFunctions (preserves order at the same field depth).\n */\nfunction sortAutoValueFunctions(autoValueFunctions) {\n  var defaultFieldOrder = autoValueFunctions.reduce(function (acc, _ref, index) {\n    var fieldName = _ref.fieldName;\n    acc[fieldName] = index;\n    return acc;\n  }, {}); // Sort by how many dots each field name has, asc, such that we can auto-create\n  // objects and arrays before we run the autoValues for properties within them.\n  // Fields of the same level (same number of dots) preserve should order from the original array.\n\n  return autoValueFunctions.sort(function (a, b) {\n    var depthDiff = a.fieldName.split('.').length - b.fieldName.split('.').length;\n    return depthDiff === 0 ? defaultFieldOrder[a.fieldName] - defaultFieldOrder[b.fieldName] : depthDiff;\n  });\n}\n/**\n * @method setAutoValues\n * @private\n * @param {Array} autoValueFunctions - An array of objects with func, fieldName, and closestSubschemaFieldName props\n * @param {MongoObject} mongoObject\n * @param {Boolean} [isModifier=false] - Is it a modifier doc?\n * @param {Object} [extendedAutoValueContext] - Object that will be added to the context when calling each autoValue function\n * @returns {undefined}\n *\n * Updates doc with automatic values from autoValue functions or default\n * values from defaultValue. Modifies the referenced object in place.\n */\n\n\nfunction setAutoValues(autoValueFunctions, mongoObject, isModifier, isUpsert, extendedAutoValueContext) {\n  var sortedAutoValueFunctions = sortAutoValueFunctions(autoValueFunctions);\n  sortedAutoValueFunctions.forEach(function (_ref2) {\n    var func = _ref2.func,\n        fieldName = _ref2.fieldName,\n        closestSubschemaFieldName = _ref2.closestSubschemaFieldName;\n    var avRunner = new _AutoValueRunner.default({\n      closestSubschemaFieldName: closestSubschemaFieldName,\n      extendedAutoValueContext: extendedAutoValueContext,\n      func: func,\n      isModifier: isModifier,\n      isUpsert: isUpsert,\n      mongoObject: mongoObject\n    });\n    var positions = (0, _getPositionsForAutoValue.default)({\n      fieldName: fieldName,\n      isModifier: isModifier,\n      mongoObject: mongoObject\n    }); // Run the autoValue function once for each place in the object that\n    // has a value or that potentially should.\n\n    positions.forEach(avRunner.runForPosition.bind(avRunner));\n  });\n}\n\nvar _default = setAutoValues;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}