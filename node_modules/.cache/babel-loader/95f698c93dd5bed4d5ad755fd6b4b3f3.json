{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar REMOVED_MARKER = '______MONGO_OBJECT_REMOVED______';\n\nvar MongoObject = /*#__PURE__*/function () {\n  /*\n   * @constructor\n   * @param {Object} obj\n   * @param {string[]}  blackboxKeys  - A list of the names of keys that shouldn't be traversed\n   * @returns {undefined}\n   *\n   * Creates a new MongoObject instance. The object passed as the first argument\n   * will be modified in place by calls to instance methods. Also, immediately\n   * upon creation of the instance, the object will have any `undefined` keys\n   * removed recursively.\n   */\n  function MongoObject(obj) {\n    var blackboxKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, MongoObject);\n\n    this._obj = obj;\n    this._blackboxKeys = blackboxKeys;\n\n    this._reParseObj();\n  }\n\n  _createClass(MongoObject, [{\n    key: \"_reParseObj\",\n    value: function _reParseObj() {\n      var blackboxKeys = this._blackboxKeys;\n      this._affectedKeys = {};\n      this._genericAffectedKeys = {};\n      this._positionsByGenericKey = {};\n      this._positionsThatCreateGenericKey = {};\n      this._parentPositions = [];\n      this._positionsInsideArrays = [];\n      this._objectPositions = [];\n      this._arrayItemPositions = [];\n\n      function parseObj(self, val, currentPosition, affectedKey, operator, adjusted, isWithinArray) {\n        // Adjust for first-level modifier operators\n        if (!operator && affectedKey && affectedKey.substring(0, 1) === '$') {\n          operator = affectedKey;\n          affectedKey = null;\n        }\n\n        var affectedKeyIsBlackBox = false;\n        var stop = false;\n\n        if (affectedKey) {\n          // Adjust for $push and $addToSet and $pull and $pop\n          if (!adjusted) {\n            if (operator === '$push' || operator === '$addToSet' || operator === '$pop') {\n              // Adjust for $each\n              // We can simply jump forward and pretend like the $each array\n              // is the array for the field. This has the added benefit of\n              // skipping past any $slice, which we also don't care about.\n              if (MongoObject.isBasicObject(val) && '$each' in val) {\n                val = val.$each;\n                currentPosition = \"\".concat(currentPosition, \"[$each]\");\n              } else {\n                affectedKey = \"\".concat(affectedKey, \".0\");\n              }\n\n              adjusted = true;\n            } else if (operator === '$pull') {\n              affectedKey = \"\".concat(affectedKey, \".0\");\n\n              if (MongoObject.isBasicObject(val)) {\n                stop = true;\n              }\n\n              adjusted = true;\n            }\n          } // Make generic key\n\n\n          var affectedKeyGeneric = MongoObject.makeKeyGeneric(affectedKey); // Determine whether affected key should be treated as a black box\n\n          affectedKeyIsBlackBox = blackboxKeys.indexOf(affectedKeyGeneric) > -1; // Mark that this position affects this generic and non-generic key\n\n          if (currentPosition) {\n            self._affectedKeys[currentPosition] = affectedKey;\n            self._genericAffectedKeys[currentPosition] = affectedKeyGeneric;\n            var positionInfo = {\n              key: affectedKey,\n              operator: operator || null,\n              position: currentPosition\n            };\n            if (!self._positionsByGenericKey[affectedKeyGeneric]) self._positionsByGenericKey[affectedKeyGeneric] = [];\n\n            self._positionsByGenericKey[affectedKeyGeneric].push(positionInfo); // Operators other than $unset will cause ancestor object keys to\n            // be auto-created.\n\n\n            if (operator && operator !== '$unset') {\n              MongoObject.objectsThatGenericKeyWillCreate(affectedKeyGeneric).forEach(function (objGenericKey) {\n                if (!self._positionsThatCreateGenericKey[objGenericKey]) {\n                  self._positionsThatCreateGenericKey[objGenericKey] = [];\n                }\n\n                self._positionsThatCreateGenericKey[objGenericKey].push(positionInfo);\n              });\n            } // If we're within an array, mark this position so we can omit it from flat docs\n\n\n            if (isWithinArray) self._positionsInsideArrays.push(currentPosition);\n          }\n        }\n\n        if (stop) return; // Loop through arrays\n\n        if (Array.isArray(val) && val.length > 0) {\n          if (currentPosition) {\n            // Mark positions with arrays that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition);\n          } // Loop\n\n\n          val.forEach(function (v, i) {\n            if (currentPosition) self._arrayItemPositions.push(\"\".concat(currentPosition, \"[\").concat(i, \"]\"));\n            parseObj(self, v, currentPosition ? \"\".concat(currentPosition, \"[\").concat(i, \"]\") : i, \"\".concat(affectedKey, \".\").concat(i), operator, adjusted, true);\n          });\n        } else if (MongoObject.isBasicObject(val) && !affectedKeyIsBlackBox || !currentPosition) {\n          // Loop through object keys, only for basic objects,\n          // but always for the passed-in object, even if it\n          // is a custom object.\n          if (currentPosition && !isEmpty(val)) {\n            // Mark positions with objects that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition); // Mark positions with objects that should be left out of flat docs.\n\n\n            self._objectPositions.push(currentPosition);\n          } // Loop\n\n\n          Object.keys(val).forEach(function (k) {\n            var v = val[k];\n\n            if (v === undefined) {\n              delete val[k];\n            } else if (k !== '$slice') {\n              parseObj(self, v, currentPosition ? \"\".concat(currentPosition, \"[\").concat(k, \"]\") : k, appendAffectedKey(affectedKey, k), operator, adjusted, isWithinArray);\n            }\n          });\n        }\n      }\n\n      parseObj(this, this._obj);\n    }\n    /**\n     * @method MongoObject.forEachNode\n     * @param {Function} func\n     * @param {Object} [options]\n     * @param {Boolean} [options.endPointsOnly=true] - Only call function for endpoints and not for nodes that contain other nodes\n     * @returns {undefined}\n     *\n     * Runs a function for each endpoint node in the object tree, including all items in every array.\n     * The function arguments are\n     * (1) the value at this node\n     * (2) a string representing the node position\n     * (3) the representation of what would be changed in mongo, using mongo dot notation\n     * (4) the generic equivalent of argument 3, with '$' instead of numeric pieces\n     */\n\n  }, {\n    key: \"forEachNode\",\n    value: function forEachNode(func) {\n      var _this = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$endPointsOnly = _ref.endPointsOnly,\n          endPointsOnly = _ref$endPointsOnly === void 0 ? true : _ref$endPointsOnly;\n\n      if (typeof func !== 'function') throw new Error('filter requires a loop function');\n      var updatedValues = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        if (endPointsOnly && _this._parentPositions.indexOf(position) > -1) return; // Only endpoints\n\n        func.call({\n          value: _this.getValueForPosition(position),\n          isArrayItem: _this._arrayItemPositions.indexOf(position) > -1,\n          operator: extractOp(position),\n          position: position,\n          key: _this._affectedKeys[position],\n          genericKey: _this._genericAffectedKeys[position],\n          updateValue: function updateValue(newVal) {\n            updatedValues[position] = newVal;\n          },\n          remove: function remove() {\n            updatedValues[position] = undefined;\n          }\n        });\n      }); // Actually update/remove values as instructed\n\n      Object.keys(updatedValues).forEach(function (position) {\n        _this.setValueForPosition(position, updatedValues[position]);\n      });\n    }\n  }, {\n    key: \"getValueForPosition\",\n    value: function getValueForPosition(position) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i]; // If the subkey ends in ']', remove the ending\n\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1);\n        current = current[subkey];\n        if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n      }\n\n      if (current === REMOVED_MARKER) return;\n      return current;\n    }\n    /**\n     * @method MongoObject.prototype.setValueForPosition\n     * @param {String} position\n     * @param {Any} value\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"setValueForPosition\",\n    value: function setValueForPosition(position, value) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n      var createdObjectsOrArrays = false;\n      var affectedKey = '';\n\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i]; // If the subkey ends in \"]\", remove the ending\n\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1); // We don't store modifiers\n\n        if (subkey && subkey.substring(0, 1) !== '$') {\n          affectedKey = appendAffectedKey(affectedKey, subkey);\n        } // If we've reached the key in the object tree that needs setting or\n        // deleting, do it.\n\n\n        if (i === ln - 1) {\n          // If value is undefined, delete the property\n          if (value === undefined) {\n            if (Array.isArray(current)) {\n              // We can't just delete it because indexes in the position strings will be off\n              // We will mark it uniquely and then parse this elsewhere\n              current[subkey] = REMOVED_MARKER;\n            } else {\n              delete current[subkey];\n            }\n          } else {\n            current[subkey] = value;\n          }\n\n          this._affectedKeys[position] = affectedKey;\n        } else {\n          // Otherwise attempt to keep moving deeper into the object.\n          // If we're setting (as opposed to deleting) a key and we hit a place\n          // in the ancestor chain where the keys are not yet created, create them.\n          if (current[subkey] === undefined && value !== undefined) {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n            current[subkey] = Number.isNaN(nextPiece) ? {} : [];\n            createdObjectsOrArrays = true;\n          } // Move deeper into the object\n\n\n          current = current[subkey]; // If we can go no further, then quit\n\n          if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n        }\n      } // If there are now new arrays or objects in the main object, we need to reparse it\n\n\n      if (createdObjectsOrArrays || Array.isArray(value) || MongoObject.isBasicObject(value)) {\n        this._reParseObj();\n      }\n    }\n    /**\n     * @method MongoObject.prototype.removeValueForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"removeValueForPosition\",\n    value: function removeValueForPosition(position) {\n      this.setValueForPosition(position, undefined);\n    }\n    /**\n     * @method MongoObject.prototype.getKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"getKeyForPosition\",\n    value: function getKeyForPosition(position) {\n      return this._affectedKeys[position];\n    }\n    /**\n     * @method MongoObject.prototype.getGenericKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"getGenericKeyForPosition\",\n    value: function getGenericKeyForPosition(position) {\n      return this._genericAffectedKeys[position];\n    }\n    /**\n     * @method MongoObject.getInfoForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Object}\n     *\n     * Returns the value and operator of the requested non-generic key.\n     * Example: {value: 1, operator: \"$pull\"}\n     */\n\n  }, {\n    key: \"getInfoForKey\",\n    value: function getInfoForKey(key) {\n      // Get the info\n      var position = this.getPositionForKey(key);\n\n      if (position) {\n        return {\n          value: this.getValueForPosition(position),\n          operator: extractOp(position)\n        };\n      } // If we haven't returned yet, check to see if there is an array value\n      // corresponding to this key\n      // We find the first item within the array, strip the last piece off the\n      // position string, and then return whatever is at that new position in\n      // the original object.\n\n\n      var positions = this.getPositionsForGenericKey(\"\".concat(key, \".$\"));\n\n      for (var index = 0; index < positions.length; index++) {\n        var pos = positions[index];\n        var value = this.getValueForPosition(pos);\n\n        if (value === undefined) {\n          var parentPosition = pos.slice(0, pos.lastIndexOf('['));\n          value = this.getValueForPosition(parentPosition);\n        }\n\n        if (value !== undefined) {\n          return {\n            value: value,\n            operator: extractOp(pos)\n          };\n        }\n      }\n    }\n    /**\n     * @method MongoObject.getPositionForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|String} Position string\n     *\n     * Returns the position string for the place in the object that\n     * affects the requested non-generic key.\n     * Example: 'foo[bar][0]'\n     */\n\n  }, {\n    key: \"getPositionForKey\",\n    value: function getPositionForKey(key) {\n      var positions = Object.getOwnPropertyNames(this._affectedKeys);\n\n      for (var index = 0; index < positions.length; index++) {\n        var position = positions[index]; // We return the first one we find. While it's\n        // possible that multiple update operators could\n        // affect the same non-generic key, we'll assume that's not the case.\n\n        if (this._affectedKeys[position] === key) return position;\n      }\n    }\n    /**\n     * @method MongoObject.getPositionsForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {String[]} Array of position strings\n     *\n     * Returns an array of position strings for the places in the object that\n     * affect the requested generic key.\n     * Example: ['foo[bar][0]']\n     */\n\n  }, {\n    key: \"getPositionsForGenericKey\",\n    value: function getPositionsForGenericKey(genericKey) {\n      return this.getPositionsInfoForGenericKey(genericKey).map(function (p) {\n        return p.position;\n      });\n    }\n    /**\n     * @method MongoObject.getPositionsInfoForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {Object[]} Array of position info objects\n     *\n     * Returns an array of position info for the places in the object that\n     * affect the requested generic key.\n     */\n\n  }, {\n    key: \"getPositionsInfoForGenericKey\",\n    value: function getPositionsInfoForGenericKey(genericKey) {\n      var _this2 = this;\n\n      var positions = this._positionsByGenericKey[genericKey];\n      if (!positions || positions.length === 0) positions = this._positionsByGenericKey[\"\".concat(genericKey, \".$\")];\n      if (!positions || positions.length === 0) positions = [];\n      return positions.map(function (info) {\n        return _objectSpread({\n          value: _this2.getValueForPosition(info.position)\n        }, info);\n      });\n    }\n  }, {\n    key: \"getPositionsThatCreateGenericKey\",\n    value: function getPositionsThatCreateGenericKey(genericKey) {\n      return this._positionsThatCreateGenericKey[genericKey] || [];\n    }\n    /**\n     * @deprecated Use getInfoForKey\n     * @method MongoObject.getValueForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Any}\n     *\n     * Returns the value of the requested non-generic key\n     */\n\n  }, {\n    key: \"getValueForKey\",\n    value: function getValueForKey(key) {\n      var position = this.getPositionForKey(key);\n      if (position) return this.getValueForPosition(position);\n    }\n    /**\n     * @method MongoObject.prototype.addKey\n     * @param {String} key - Key to set\n     * @param {Any} val - Value to give this key\n     * @param {String} op - Operator under which to set it, or `null` for a non-modifier object\n     * @returns {undefined}\n     *\n     * Adds `key` with value `val` under operator `op` to the source object.\n     */\n\n  }, {\n    key: \"addKey\",\n    value: function addKey(key, val, op) {\n      var position = op ? \"\".concat(op, \"[\").concat(key, \"]\") : MongoObject._keyToPosition(key);\n      this.setValueForPosition(position, val);\n    }\n    /**\n     * @method MongoObject.prototype.removeGenericKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the generic keys in the list\n     */\n\n  }, {\n    key: \"removeGenericKeys\",\n    value: function removeGenericKeys(keys) {\n      var _this3 = this;\n\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        if (keys.indexOf(_this3._genericAffectedKeys[position]) > -1) {\n          _this3.removeValueForPosition(position);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.removeGenericKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested generic key\n     */\n\n  }, {\n    key: \"removeGenericKey\",\n    value: function removeGenericKey(key) {\n      var _this4 = this;\n\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        if (_this4._genericAffectedKeys[position] === key) {\n          _this4.removeValueForPosition(position);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.removeKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested non-generic key\n     */\n\n  }, {\n    key: \"removeKey\",\n    value: function removeKey(key) {\n      var _this5 = this; // We don't use getPositionForKey here because we want to be sure to\n      // remove for all positions if there are multiple.\n\n\n      Object.getOwnPropertyNames(this._affectedKeys).forEach(function (position) {\n        if (_this5._affectedKeys[position] === key) {\n          _this5.removeValueForPosition(position);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.removeKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the non-generic keys in the list\n     */\n\n  }, {\n    key: \"removeKeys\",\n    value: function removeKeys(keys) {\n      var _this6 = this;\n\n      keys.forEach(function (key) {\n        return _this6.removeKey(key);\n      });\n    }\n    /**\n     * @method MongoObject.filterGenericKeys\n     * @param {Function} test - Test function\n     * @returns {undefined}\n     *\n     * Passes all affected keys to a test function, which\n     * should return false to remove whatever is affecting that key\n     */\n\n  }, {\n    key: \"filterGenericKeys\",\n    value: function filterGenericKeys(test) {\n      var _this7 = this;\n\n      var checkedKeys = [];\n      var keysToRemove = [];\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        var genericKey = _this7._genericAffectedKeys[position];\n\n        if (checkedKeys.indexOf(genericKey) === -1) {\n          checkedKeys.push(genericKey);\n\n          if (genericKey && !test(genericKey)) {\n            keysToRemove.push(genericKey);\n          }\n        }\n      });\n      keysToRemove.forEach(function (key) {\n        return _this7.removeGenericKey(key);\n      });\n    }\n    /**\n     * @method MongoObject.setValueForKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested non-generic key\n     */\n\n  }, {\n    key: \"setValueForKey\",\n    value: function setValueForKey(key, val) {\n      var _this8 = this; // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n\n\n      Object.getOwnPropertyNames(this._affectedKeys).forEach(function (position) {\n        if (_this8._affectedKeys[position] === key) {\n          _this8.setValueForPosition(position, val);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.setValueForGenericKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested generic key\n     */\n\n  }, {\n    key: \"setValueForGenericKey\",\n    value: function setValueForGenericKey(key, val) {\n      var _this9 = this; // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n\n\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        if (_this9._genericAffectedKeys[position] === key) {\n          _this9.setValueForPosition(position, val);\n        }\n      });\n    }\n  }, {\n    key: \"removeArrayItems\",\n    value: function removeArrayItems() {\n      // Traverse and pull out removed array items at this point\n      function traverse(obj) {\n        each(obj, function (val, indexOrProp) {\n          // Move deeper into the object\n          var next = obj[indexOrProp]; // If we can go no further, then quit\n\n          if (MongoObject.isBasicObject(next)) {\n            traverse(next);\n          } else if (Array.isArray(next)) {\n            obj[indexOrProp] = next.filter(function (item) {\n              return item !== REMOVED_MARKER;\n            });\n            traverse(obj[indexOrProp]);\n          }\n        });\n      }\n\n      traverse(this._obj);\n    }\n    /**\n     * @method MongoObject.getObject\n     * @returns {Object}\n     *\n     * Get the source object, potentially modified by other method calls on this\n     * MongoObject instance.\n     */\n\n  }, {\n    key: \"getObject\",\n    value: function getObject() {\n      return this._obj;\n    }\n    /**\n     * @method MongoObject.getFlatObject\n     * @returns {Object}\n     *\n     * Gets a flat object based on the MongoObject instance.\n     * In a flat object, the key is the name of the non-generic affectedKey,\n     * with mongo dot notation if necessary, and the value is the value for\n     * that key.\n     *\n     * With `keepArrays: true`, we don't flatten within arrays. Currently\n     * MongoDB does not see a key such as `a.0.b` and automatically assume\n     * an array. Instead it would create an object with key '0' if there\n     * wasn't already an array saved as the value of `a`, which is rarely\n     * if ever what we actually want. To avoid this confusion, we\n     * set entire arrays.\n     */\n\n  }, {\n    key: \"getFlatObject\",\n    value: function getFlatObject() {\n      var _this10 = this;\n\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$keepArrays = _ref2.keepArrays,\n          keepArrays = _ref2$keepArrays === void 0 ? false : _ref2$keepArrays;\n\n      var newObj = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        var affectedKey = _this10._affectedKeys[position];\n\n        if (typeof affectedKey === 'string' && (keepArrays === true && _this10._positionsInsideArrays.indexOf(position) === -1 && _this10._objectPositions.indexOf(position) === -1 || keepArrays !== true && _this10._parentPositions.indexOf(position) === -1)) {\n          newObj[affectedKey] = _this10.getValueForPosition(position);\n        }\n      });\n      return newObj;\n    }\n    /**\n     * @method MongoObject.affectsKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the non-generic key is affected by this object\n     */\n\n  }, {\n    key: \"affectsKey\",\n    value: function affectsKey(key) {\n      return !!this.getPositionForKey(key);\n    }\n    /**\n     * @method MongoObject.affectsGenericKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the generic key is affected by this object\n     */\n\n  }, {\n    key: \"affectsGenericKey\",\n    value: function affectsGenericKey(key) {\n      var positions = Object.getOwnPropertyNames(this._genericAffectedKeys);\n\n      for (var index = 0; index < positions.length; index++) {\n        var position = positions[index];\n        if (this._genericAffectedKeys[position] === key) return true;\n      }\n\n      return false;\n    }\n    /**\n     * @method MongoObject.affectsGenericKeyImplicit\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Like affectsGenericKey, but will return true if a child key is affected\n     */\n\n  }, {\n    key: \"affectsGenericKeyImplicit\",\n    value: function affectsGenericKeyImplicit(key) {\n      var positions = Object.getOwnPropertyNames(this._genericAffectedKeys);\n\n      for (var index = 0; index < positions.length; index++) {\n        var position = positions[index];\n        var affectedKey = this._genericAffectedKeys[position];\n        if (genericKeyAffectsOtherGenericKey(key, affectedKey)) return true;\n      }\n\n      return false;\n    }\n    /* STATIC */\n\n    /* Takes a specific string that uses mongo-style dot notation\n     * and returns a generic string equivalent. Replaces all numeric\n     * \"pieces\" with a dollar sign ($).\n     *\n     * @param {type} name\n     * @returns {String} Generic name.\n     */\n\n  }], [{\n    key: \"makeKeyGeneric\",\n    value: function makeKeyGeneric(key) {\n      if (typeof key !== 'string') return null;\n      return key.replace(/\\.[0-9]+(?=\\.|$)/g, '.$');\n    }\n    /** Takes a string representation of an object key and its value\n     *  and updates \"obj\" to contain that key with that value.\n     *\n     *  Example keys and results if val is 1:\n     *    \"a\" -> {a: 1}\n     *    \"a[b]\" -> {a: {b: 1}}\n     *    \"a[b][0]\" -> {a: {b: [1]}}\n     *    'a[b.0.c]' -> {a: {'b.0.c': 1}}\n     *\n     * @param {any} val\n     * @param {String} key\n     * @param {Object} obj\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"expandKey\",\n    value: function expandKey(val, key, obj) {\n      var subkeys = key.split('[');\n      var current = obj;\n\n      for (var i = 0, ln = subkeys.length; i < ln; i++) {\n        var subkey = subkeys[i];\n\n        if (subkey.slice(-1) === ']') {\n          subkey = subkey.slice(0, -1);\n        }\n\n        if (i === ln - 1) {\n          // Last iteration; time to set the value; always overwrite\n          current[subkey] = val; // If val is undefined, delete the property\n\n          if (val === undefined) delete current[subkey];\n        } else {\n          // See if the next piece is a number\n          var nextPiece = subkeys[i + 1];\n          nextPiece = parseInt(nextPiece, 10);\n\n          if (!current[subkey]) {\n            current[subkey] = Number.isNaN(nextPiece) ? {} : [];\n          }\n        }\n\n        current = current[subkey];\n      }\n    }\n  }, {\n    key: \"_keyToPosition\",\n    value: function _keyToPosition(key, wrapAll) {\n      var position = '';\n      key.split('.').forEach(function (piece, i) {\n        if (i === 0 && !wrapAll) {\n          position += piece;\n        } else {\n          position += \"[\".concat(piece, \"]\");\n        }\n      });\n      return position;\n    }\n    /**\n     * @method MongoObject._positionToKey\n     * @param {String} position\n     * @returns {String} The key that this position in an object would affect.\n     *\n     * This is different from MongoObject.prototype.getKeyForPosition in that\n     * this method does not depend on the requested position actually being\n     * present in any particular MongoObject.\n     */\n\n  }, {\n    key: \"_positionToKey\",\n    value: function _positionToKey(position) {\n      // XXX Probably a better way to do this, but this is\n      // foolproof for now.\n      var mDoc = new MongoObject({});\n      mDoc.setValueForPosition(position, 1); // Value doesn't matter\n\n      return mDoc.getKeyForPosition(position);\n    }\n    /**\n     * @method MongoObject.cleanNulls\n     * @public\n     * @param {Object} doc - Source object\n     * @returns {Object}\n     *\n     * Returns an object in which all properties with null, undefined, or empty\n     * string values have been removed, recursively.\n     */\n\n  }, {\n    key: \"cleanNulls\",\n    value: function cleanNulls(doc, isArray, keepEmptyStrings) {\n      var newDoc = isArray ? [] : {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n\n        if (!Array.isArray(val) && MongoObject.isBasicObject(val)) {\n          val = MongoObject.cleanNulls(val, false, keepEmptyStrings); // Recurse into plain objects\n\n          if (!isEmpty(val)) newDoc[key] = val;\n        } else if (Array.isArray(val)) {\n          val = MongoObject.cleanNulls(val, true, keepEmptyStrings); // Recurse into non-typed arrays\n\n          if (!isEmpty(val)) newDoc[key] = val;\n        } else if (!isNullUndefinedOrEmptyString(val)) {\n          newDoc[key] = val;\n        } else if (keepEmptyStrings && typeof val === 'string' && val.length === 0) {\n          newDoc[key] = val;\n        }\n      });\n      return newDoc;\n    }\n    /**\n     * @method MongoObject.reportNulls\n     * @public\n     * @param {Object} flatDoc - An object with no properties that are also objects.\n     * @returns {Object} An object in which the keys represent the keys in the\n     * original object that were null, undefined, or empty strings, and the value\n     * of each key is \"\".\n     */\n\n  }, {\n    key: \"reportNulls\",\n    value: function reportNulls(flatDoc, keepEmptyStrings) {\n      var nulls = {}; // Loop through the flat doc\n\n      Object.keys(flatDoc).forEach(function (key) {\n        var val = flatDoc[key];\n\n        if (val === null || val === undefined || !keepEmptyStrings && typeof val === 'string' && val.length === 0 // If value is an array in which all the values recursively are undefined, null,\n        // or an empty string\n        || Array.isArray(val) && MongoObject.cleanNulls(val, true, keepEmptyStrings).length === 0) {\n          nulls[key] = '';\n        }\n      });\n      return nulls;\n    }\n    /**\n     * @method MongoObject.docToModifier\n     * @public\n     * @param {Object} doc - An object to be converted into a MongoDB modifier\n     * @param {Object} [options] - Options\n     * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n     * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n     * @returns {Object} A MongoDB modifier.\n     *\n     * Converts an object into a modifier by flattening it, putting keys with\n     * null, undefined, and empty string values into `modifier.$unset`, and\n     * putting the rest of the keys into `modifier.$set`.\n     */\n\n  }, {\n    key: \"docToModifier\",\n    value: function docToModifier(doc) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$keepArrays = _ref3.keepArrays,\n          keepArrays = _ref3$keepArrays === void 0 ? false : _ref3$keepArrays,\n          _ref3$keepEmptyString = _ref3.keepEmptyStrings,\n          keepEmptyStrings = _ref3$keepEmptyString === void 0 ? false : _ref3$keepEmptyString; // Flatten doc\n\n\n      var mDoc = new MongoObject(doc);\n      var flatDoc = mDoc.getFlatObject({\n        keepArrays: keepArrays\n      }); // Get a list of null, undefined, and empty string values so we can unset them instead\n\n      var nulls = MongoObject.reportNulls(flatDoc, keepEmptyStrings);\n      flatDoc = MongoObject.cleanNulls(flatDoc, false, keepEmptyStrings);\n      var modifier = {};\n      if (!isEmpty(flatDoc)) modifier.$set = flatDoc;\n      if (!isEmpty(nulls)) modifier.$unset = nulls;\n      return modifier;\n    }\n    /* Tests whether \"obj\" is an Object as opposed to\n     * something that inherits from Object\n     *\n     * @param {any} obj\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isBasicObject\",\n    value: function isBasicObject(obj) {\n      return obj === Object(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n    }\n    /**\n     * @method MongoObject.objAffectsKey\n     * @public\n     * @param  {Object} obj\n     * @param  {String} key\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"objAffectsKey\",\n    value: function objAffectsKey(obj, key) {\n      var mDoc = new MongoObject(obj);\n      return mDoc.affectsKey(key);\n    }\n    /**\n     * @method MongoObject.objectsThatGenericKeyWillCreate\n     * @public\n     * @param  {String} genericKey\n     * @return {String[]} Array of other generic keys that would be created\n     *                    by this generic key\n     */\n\n  }, {\n    key: \"objectsThatGenericKeyWillCreate\",\n    value: function objectsThatGenericKeyWillCreate(genericKey) {\n      var objs = [];\n\n      do {\n        var lastDotPosition = genericKey.lastIndexOf('.');\n        genericKey = lastDotPosition === -1 ? '' : genericKey.slice(0, lastDotPosition);\n        if (genericKey.length && !genericKey.endsWith('.$')) objs.push(genericKey);\n      } while (genericKey.length);\n\n      return objs;\n    }\n    /**\n     * @method MongoObject.expandObj\n     * @public\n     * @param  {Object} doc\n     * @return {Object}\n     *\n     * Takes a flat object and returns an expanded version of it.\n     */\n\n  }, {\n    key: \"expandObj\",\n    value: function expandObj(doc) {\n      var newDoc = {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n        var subkeys = key.split('.');\n        var subkeylen = subkeys.length;\n        var current = newDoc;\n\n        for (var i = 0; i < subkeylen; i++) {\n          var subkey = subkeys[i];\n\n          if (typeof current[subkey] !== 'undefined' && !isObject(current[subkey])) {\n            break; // Already set for some reason; leave it alone\n          }\n\n          if (i === subkeylen - 1) {\n            // Last iteration; time to set the value\n            current[subkey] = val;\n          } else {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n\n            if (Number.isNaN(nextPiece) && !isObject(current[subkey])) {\n              current[subkey] = {};\n            } else if (!Number.isNaN(nextPiece) && !Array.isArray(current[subkey])) {\n              current[subkey] = [];\n            }\n          }\n\n          current = current[subkey];\n        }\n      });\n      return newDoc;\n    }\n  }]);\n\n  return MongoObject;\n}();\n/* PRIVATE */\n\n\nexports[\"default\"] = MongoObject;\n\nfunction appendAffectedKey(affectedKey, key) {\n  if (key === '$each') return affectedKey;\n  return affectedKey ? \"\".concat(affectedKey, \".\").concat(key) : key;\n} // Extracts operator piece, if present, from position string\n\n\nfunction extractOp(position) {\n  var firstPositionPiece = position.slice(0, position.indexOf('['));\n  return firstPositionPiece.substring(0, 1) === '$' ? firstPositionPiece : null;\n}\n\nfunction genericKeyAffectsOtherGenericKey(key, affectedKey) {\n  // If the affected key is the test key\n  if (affectedKey === key) return true; // If the affected key implies the test key because the affected key\n  // starts with the test key followed by a period\n\n  if (affectedKey.substring(0, key.length + 1) === \"\".concat(key, \".\")) return true; // If the affected key implies the test key because the affected key\n  // starts with the test key and the test key ends with \".$\"\n\n  var lastTwo = key.slice(-2);\n  if (lastTwo === '.$' && key.slice(0, -2) === affectedKey) return true;\n  return false;\n}\n\nfunction isNullUndefinedOrEmptyString(val) {\n  return val === undefined || val === null || typeof val === 'string' && val.length === 0;\n}\n/** Used as references for various `Number` constants. */\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\nfunction isLength(value) {\n  return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;\n}\n\nfunction isArrayLike(value) {\n  return value != null && typeof value !== 'function' && isLength(value.length);\n}\n\nfunction each(collection, iteratee) {\n  if (collection == null) {\n    return;\n  }\n\n  if (Array.isArray(collection)) {\n    collection.forEach(iteratee);\n    return;\n  }\n\n  var iterable = Object(collection);\n\n  if (!isArrayLike(collection)) {\n    Object.keys(iterable).forEach(function (key) {\n      return iteratee(iterable[key], key, iterable);\n    });\n    return;\n  }\n\n  var index = -1;\n\n  while (++index < collection.length) {\n    if (iteratee(iterable[index], index, iterable) === false) {\n      break;\n    }\n  }\n}\n\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor;\n  var proto = typeof Ctor === 'function' && Ctor.prototype || Object.prototype;\n  return value === proto;\n}\n\nfunction isEmpty(value) {\n  if (value === null || value === undefined) {\n    return true;\n  }\n\n  if (Array.isArray(value) || typeof value === 'string') {\n    return !value.length;\n  }\n\n  var tag = Object.prototype.toString.call(value);\n\n  if (tag === '[object Map]' || tag === '[object Set]') {\n    return !value.size;\n  }\n\n  if (isPrototype(value)) {\n    return !Object.keys(value).length;\n  }\n  /* eslint-disable no-restricted-syntax */\n\n\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  /* eslint-enable no-restricted-syntax */\n\n\n  return true;\n}\n\nfunction isObject(value) {\n  var type = _typeof(value);\n\n  return value != null && (type === 'object' || type === 'function');\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/node_modules/mongo-object/dist/mongo-object.js"],"names":["Object","defineProperty","exports","value","default","_typeof","obj","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","REMOVED_MARKER","MongoObject","blackboxKeys","undefined","_obj","_blackboxKeys","_reParseObj","_affectedKeys","_genericAffectedKeys","_positionsByGenericKey","_positionsThatCreateGenericKey","_parentPositions","_positionsInsideArrays","_objectPositions","_arrayItemPositions","parseObj","self","val","currentPosition","affectedKey","operator","adjusted","isWithinArray","substring","affectedKeyIsBlackBox","stop","isBasicObject","$each","concat","affectedKeyGeneric","makeKeyGeneric","indexOf","positionInfo","position","objectsThatGenericKeyWillCreate","objGenericKey","Array","isArray","v","isEmpty","k","appendAffectedKey","forEachNode","func","_this","_ref","_ref$endPointsOnly","endPointsOnly","Error","updatedValues","call","getValueForPosition","isArrayItem","extractOp","genericKey","updateValue","newVal","remove","setValueForPosition","subkeys","split","current","ln","subkey","slice","createdObjectsOrArrays","nextPiece","parseInt","Number","isNaN","removeValueForPosition","getKeyForPosition","getGenericKeyForPosition","getInfoForKey","getPositionForKey","positions","getPositionsForGenericKey","index","pos","parentPosition","lastIndexOf","getOwnPropertyNames","getPositionsInfoForGenericKey","map","p","_this2","info","getPositionsThatCreateGenericKey","getValueForKey","addKey","op","_keyToPosition","removeGenericKeys","_this3","removeGenericKey","_this4","removeKey","_this5","removeKeys","_this6","filterGenericKeys","test","_this7","checkedKeys","keysToRemove","setValueForKey","_this8","setValueForGenericKey","_this9","removeArrayItems","traverse","each","indexOrProp","next","item","getObject","getFlatObject","_this10","_ref2","_ref2$keepArrays","keepArrays","newObj","affectsKey","affectsGenericKey","affectsGenericKeyImplicit","genericKeyAffectsOtherGenericKey","replace","expandKey","wrapAll","piece","_positionToKey","mDoc","cleanNulls","doc","keepEmptyStrings","newDoc","isNullUndefinedOrEmptyString","reportNulls","flatDoc","nulls","docToModifier","_ref3","_ref3$keepArrays","_ref3$keepEmptyString","modifier","$set","$unset","getPrototypeOf","objAffectsKey","objs","lastDotPosition","endsWith","expandObj","subkeylen","isObject","firstPositionPiece","lastTwo","MAX_SAFE_INTEGER","isLength","isArrayLike","collection","iteratee","iterable","isPrototype","Ctor","proto","tag","toString","size","hasOwnProperty","type","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar REMOVED_MARKER = '______MONGO_OBJECT_REMOVED______';\n\nvar MongoObject = /*#__PURE__*/function () {\n  /*\n   * @constructor\n   * @param {Object} obj\n   * @param {string[]}  blackboxKeys  - A list of the names of keys that shouldn't be traversed\n   * @returns {undefined}\n   *\n   * Creates a new MongoObject instance. The object passed as the first argument\n   * will be modified in place by calls to instance methods. Also, immediately\n   * upon creation of the instance, the object will have any `undefined` keys\n   * removed recursively.\n   */\n  function MongoObject(obj) {\n    var blackboxKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, MongoObject);\n\n    this._obj = obj;\n    this._blackboxKeys = blackboxKeys;\n\n    this._reParseObj();\n  }\n\n  _createClass(MongoObject, [{\n    key: \"_reParseObj\",\n    value: function _reParseObj() {\n      var blackboxKeys = this._blackboxKeys;\n      this._affectedKeys = {};\n      this._genericAffectedKeys = {};\n      this._positionsByGenericKey = {};\n      this._positionsThatCreateGenericKey = {};\n      this._parentPositions = [];\n      this._positionsInsideArrays = [];\n      this._objectPositions = [];\n      this._arrayItemPositions = [];\n\n      function parseObj(self, val, currentPosition, affectedKey, operator, adjusted, isWithinArray) {\n        // Adjust for first-level modifier operators\n        if (!operator && affectedKey && affectedKey.substring(0, 1) === '$') {\n          operator = affectedKey;\n          affectedKey = null;\n        }\n\n        var affectedKeyIsBlackBox = false;\n        var stop = false;\n\n        if (affectedKey) {\n          // Adjust for $push and $addToSet and $pull and $pop\n          if (!adjusted) {\n            if (operator === '$push' || operator === '$addToSet' || operator === '$pop') {\n              // Adjust for $each\n              // We can simply jump forward and pretend like the $each array\n              // is the array for the field. This has the added benefit of\n              // skipping past any $slice, which we also don't care about.\n              if (MongoObject.isBasicObject(val) && '$each' in val) {\n                val = val.$each;\n                currentPosition = \"\".concat(currentPosition, \"[$each]\");\n              } else {\n                affectedKey = \"\".concat(affectedKey, \".0\");\n              }\n\n              adjusted = true;\n            } else if (operator === '$pull') {\n              affectedKey = \"\".concat(affectedKey, \".0\");\n\n              if (MongoObject.isBasicObject(val)) {\n                stop = true;\n              }\n\n              adjusted = true;\n            }\n          } // Make generic key\n\n\n          var affectedKeyGeneric = MongoObject.makeKeyGeneric(affectedKey); // Determine whether affected key should be treated as a black box\n\n          affectedKeyIsBlackBox = blackboxKeys.indexOf(affectedKeyGeneric) > -1; // Mark that this position affects this generic and non-generic key\n\n          if (currentPosition) {\n            self._affectedKeys[currentPosition] = affectedKey;\n            self._genericAffectedKeys[currentPosition] = affectedKeyGeneric;\n            var positionInfo = {\n              key: affectedKey,\n              operator: operator || null,\n              position: currentPosition\n            };\n            if (!self._positionsByGenericKey[affectedKeyGeneric]) self._positionsByGenericKey[affectedKeyGeneric] = [];\n\n            self._positionsByGenericKey[affectedKeyGeneric].push(positionInfo); // Operators other than $unset will cause ancestor object keys to\n            // be auto-created.\n\n\n            if (operator && operator !== '$unset') {\n              MongoObject.objectsThatGenericKeyWillCreate(affectedKeyGeneric).forEach(function (objGenericKey) {\n                if (!self._positionsThatCreateGenericKey[objGenericKey]) {\n                  self._positionsThatCreateGenericKey[objGenericKey] = [];\n                }\n\n                self._positionsThatCreateGenericKey[objGenericKey].push(positionInfo);\n              });\n            } // If we're within an array, mark this position so we can omit it from flat docs\n\n\n            if (isWithinArray) self._positionsInsideArrays.push(currentPosition);\n          }\n        }\n\n        if (stop) return; // Loop through arrays\n\n        if (Array.isArray(val) && val.length > 0) {\n          if (currentPosition) {\n            // Mark positions with arrays that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition);\n          } // Loop\n\n\n          val.forEach(function (v, i) {\n            if (currentPosition) self._arrayItemPositions.push(\"\".concat(currentPosition, \"[\").concat(i, \"]\"));\n            parseObj(self, v, currentPosition ? \"\".concat(currentPosition, \"[\").concat(i, \"]\") : i, \"\".concat(affectedKey, \".\").concat(i), operator, adjusted, true);\n          });\n        } else if (MongoObject.isBasicObject(val) && !affectedKeyIsBlackBox || !currentPosition) {\n          // Loop through object keys, only for basic objects,\n          // but always for the passed-in object, even if it\n          // is a custom object.\n          if (currentPosition && !isEmpty(val)) {\n            // Mark positions with objects that should be ignored when we want endpoints only\n            self._parentPositions.push(currentPosition); // Mark positions with objects that should be left out of flat docs.\n\n\n            self._objectPositions.push(currentPosition);\n          } // Loop\n\n\n          Object.keys(val).forEach(function (k) {\n            var v = val[k];\n\n            if (v === undefined) {\n              delete val[k];\n            } else if (k !== '$slice') {\n              parseObj(self, v, currentPosition ? \"\".concat(currentPosition, \"[\").concat(k, \"]\") : k, appendAffectedKey(affectedKey, k), operator, adjusted, isWithinArray);\n            }\n          });\n        }\n      }\n\n      parseObj(this, this._obj);\n    }\n    /**\n     * @method MongoObject.forEachNode\n     * @param {Function} func\n     * @param {Object} [options]\n     * @param {Boolean} [options.endPointsOnly=true] - Only call function for endpoints and not for nodes that contain other nodes\n     * @returns {undefined}\n     *\n     * Runs a function for each endpoint node in the object tree, including all items in every array.\n     * The function arguments are\n     * (1) the value at this node\n     * (2) a string representing the node position\n     * (3) the representation of what would be changed in mongo, using mongo dot notation\n     * (4) the generic equivalent of argument 3, with '$' instead of numeric pieces\n     */\n\n  }, {\n    key: \"forEachNode\",\n    value: function forEachNode(func) {\n      var _this = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$endPointsOnly = _ref.endPointsOnly,\n          endPointsOnly = _ref$endPointsOnly === void 0 ? true : _ref$endPointsOnly;\n\n      if (typeof func !== 'function') throw new Error('filter requires a loop function');\n      var updatedValues = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        if (endPointsOnly && _this._parentPositions.indexOf(position) > -1) return; // Only endpoints\n\n        func.call({\n          value: _this.getValueForPosition(position),\n          isArrayItem: _this._arrayItemPositions.indexOf(position) > -1,\n          operator: extractOp(position),\n          position: position,\n          key: _this._affectedKeys[position],\n          genericKey: _this._genericAffectedKeys[position],\n          updateValue: function updateValue(newVal) {\n            updatedValues[position] = newVal;\n          },\n          remove: function remove() {\n            updatedValues[position] = undefined;\n          }\n        });\n      }); // Actually update/remove values as instructed\n\n      Object.keys(updatedValues).forEach(function (position) {\n        _this.setValueForPosition(position, updatedValues[position]);\n      });\n    }\n  }, {\n    key: \"getValueForPosition\",\n    value: function getValueForPosition(position) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i]; // If the subkey ends in ']', remove the ending\n\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1);\n        current = current[subkey];\n        if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n      }\n\n      if (current === REMOVED_MARKER) return;\n      return current;\n    }\n    /**\n     * @method MongoObject.prototype.setValueForPosition\n     * @param {String} position\n     * @param {Any} value\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"setValueForPosition\",\n    value: function setValueForPosition(position, value) {\n      var subkeys = position.split('[');\n      var current = this._obj;\n      var ln = subkeys.length;\n      var createdObjectsOrArrays = false;\n      var affectedKey = '';\n\n      for (var i = 0; i < ln; i++) {\n        var subkey = subkeys[i]; // If the subkey ends in \"]\", remove the ending\n\n        if (subkey.slice(-1) === ']') subkey = subkey.slice(0, -1); // We don't store modifiers\n\n        if (subkey && subkey.substring(0, 1) !== '$') {\n          affectedKey = appendAffectedKey(affectedKey, subkey);\n        } // If we've reached the key in the object tree that needs setting or\n        // deleting, do it.\n\n\n        if (i === ln - 1) {\n          // If value is undefined, delete the property\n          if (value === undefined) {\n            if (Array.isArray(current)) {\n              // We can't just delete it because indexes in the position strings will be off\n              // We will mark it uniquely and then parse this elsewhere\n              current[subkey] = REMOVED_MARKER;\n            } else {\n              delete current[subkey];\n            }\n          } else {\n            current[subkey] = value;\n          }\n\n          this._affectedKeys[position] = affectedKey;\n        } else {\n          // Otherwise attempt to keep moving deeper into the object.\n          // If we're setting (as opposed to deleting) a key and we hit a place\n          // in the ancestor chain where the keys are not yet created, create them.\n          if (current[subkey] === undefined && value !== undefined) {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n            current[subkey] = Number.isNaN(nextPiece) ? {} : [];\n            createdObjectsOrArrays = true;\n          } // Move deeper into the object\n\n\n          current = current[subkey]; // If we can go no further, then quit\n\n          if (!Array.isArray(current) && !MongoObject.isBasicObject(current) && i < ln - 1) return;\n        }\n      } // If there are now new arrays or objects in the main object, we need to reparse it\n\n\n      if (createdObjectsOrArrays || Array.isArray(value) || MongoObject.isBasicObject(value)) {\n        this._reParseObj();\n      }\n    }\n    /**\n     * @method MongoObject.prototype.removeValueForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"removeValueForPosition\",\n    value: function removeValueForPosition(position) {\n      this.setValueForPosition(position, undefined);\n    }\n    /**\n     * @method MongoObject.prototype.getKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"getKeyForPosition\",\n    value: function getKeyForPosition(position) {\n      return this._affectedKeys[position];\n    }\n    /**\n     * @method MongoObject.prototype.getGenericKeyForPosition\n     * @param {String} position\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"getGenericKeyForPosition\",\n    value: function getGenericKeyForPosition(position) {\n      return this._genericAffectedKeys[position];\n    }\n    /**\n     * @method MongoObject.getInfoForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Object}\n     *\n     * Returns the value and operator of the requested non-generic key.\n     * Example: {value: 1, operator: \"$pull\"}\n     */\n\n  }, {\n    key: \"getInfoForKey\",\n    value: function getInfoForKey(key) {\n      // Get the info\n      var position = this.getPositionForKey(key);\n\n      if (position) {\n        return {\n          value: this.getValueForPosition(position),\n          operator: extractOp(position)\n        };\n      } // If we haven't returned yet, check to see if there is an array value\n      // corresponding to this key\n      // We find the first item within the array, strip the last piece off the\n      // position string, and then return whatever is at that new position in\n      // the original object.\n\n\n      var positions = this.getPositionsForGenericKey(\"\".concat(key, \".$\"));\n\n      for (var index = 0; index < positions.length; index++) {\n        var pos = positions[index];\n        var value = this.getValueForPosition(pos);\n\n        if (value === undefined) {\n          var parentPosition = pos.slice(0, pos.lastIndexOf('['));\n          value = this.getValueForPosition(parentPosition);\n        }\n\n        if (value !== undefined) {\n          return {\n            value: value,\n            operator: extractOp(pos)\n          };\n        }\n      }\n    }\n    /**\n     * @method MongoObject.getPositionForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|String} Position string\n     *\n     * Returns the position string for the place in the object that\n     * affects the requested non-generic key.\n     * Example: 'foo[bar][0]'\n     */\n\n  }, {\n    key: \"getPositionForKey\",\n    value: function getPositionForKey(key) {\n      var positions = Object.getOwnPropertyNames(this._affectedKeys);\n\n      for (var index = 0; index < positions.length; index++) {\n        var position = positions[index]; // We return the first one we find. While it's\n        // possible that multiple update operators could\n        // affect the same non-generic key, we'll assume that's not the case.\n\n        if (this._affectedKeys[position] === key) return position;\n      }\n    }\n    /**\n     * @method MongoObject.getPositionsForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {String[]} Array of position strings\n     *\n     * Returns an array of position strings for the places in the object that\n     * affect the requested generic key.\n     * Example: ['foo[bar][0]']\n     */\n\n  }, {\n    key: \"getPositionsForGenericKey\",\n    value: function getPositionsForGenericKey(genericKey) {\n      return this.getPositionsInfoForGenericKey(genericKey).map(function (p) {\n        return p.position;\n      });\n    }\n    /**\n     * @method MongoObject.getPositionsInfoForGenericKey\n     * @param {String} genericKey - Generic key\n     * @returns {Object[]} Array of position info objects\n     *\n     * Returns an array of position info for the places in the object that\n     * affect the requested generic key.\n     */\n\n  }, {\n    key: \"getPositionsInfoForGenericKey\",\n    value: function getPositionsInfoForGenericKey(genericKey) {\n      var _this2 = this;\n\n      var positions = this._positionsByGenericKey[genericKey];\n      if (!positions || positions.length === 0) positions = this._positionsByGenericKey[\"\".concat(genericKey, \".$\")];\n      if (!positions || positions.length === 0) positions = [];\n      return positions.map(function (info) {\n        return _objectSpread({\n          value: _this2.getValueForPosition(info.position)\n        }, info);\n      });\n    }\n  }, {\n    key: \"getPositionsThatCreateGenericKey\",\n    value: function getPositionsThatCreateGenericKey(genericKey) {\n      return this._positionsThatCreateGenericKey[genericKey] || [];\n    }\n    /**\n     * @deprecated Use getInfoForKey\n     * @method MongoObject.getValueForKey\n     * @param {String} key - Non-generic key\n     * @returns {undefined|Any}\n     *\n     * Returns the value of the requested non-generic key\n     */\n\n  }, {\n    key: \"getValueForKey\",\n    value: function getValueForKey(key) {\n      var position = this.getPositionForKey(key);\n      if (position) return this.getValueForPosition(position);\n    }\n    /**\n     * @method MongoObject.prototype.addKey\n     * @param {String} key - Key to set\n     * @param {Any} val - Value to give this key\n     * @param {String} op - Operator under which to set it, or `null` for a non-modifier object\n     * @returns {undefined}\n     *\n     * Adds `key` with value `val` under operator `op` to the source object.\n     */\n\n  }, {\n    key: \"addKey\",\n    value: function addKey(key, val, op) {\n      var position = op ? \"\".concat(op, \"[\").concat(key, \"]\") : MongoObject._keyToPosition(key);\n      this.setValueForPosition(position, val);\n    }\n    /**\n     * @method MongoObject.prototype.removeGenericKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the generic keys in the list\n     */\n\n  }, {\n    key: \"removeGenericKeys\",\n    value: function removeGenericKeys(keys) {\n      var _this3 = this;\n\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        if (keys.indexOf(_this3._genericAffectedKeys[position]) > -1) {\n          _this3.removeValueForPosition(position);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.removeGenericKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested generic key\n     */\n\n  }, {\n    key: \"removeGenericKey\",\n    value: function removeGenericKey(key) {\n      var _this4 = this;\n\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        if (_this4._genericAffectedKeys[position] === key) {\n          _this4.removeValueForPosition(position);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.removeKey\n     * @param {String} key\n     * @returns {undefined}\n     *\n     * Removes anything that affects the requested non-generic key\n     */\n\n  }, {\n    key: \"removeKey\",\n    value: function removeKey(key) {\n      var _this5 = this;\n\n      // We don't use getPositionForKey here because we want to be sure to\n      // remove for all positions if there are multiple.\n      Object.getOwnPropertyNames(this._affectedKeys).forEach(function (position) {\n        if (_this5._affectedKeys[position] === key) {\n          _this5.removeValueForPosition(position);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.removeKeys\n     * @param {String[]} keys\n     * @returns {undefined}\n     *\n     * Removes anything that affects any of the non-generic keys in the list\n     */\n\n  }, {\n    key: \"removeKeys\",\n    value: function removeKeys(keys) {\n      var _this6 = this;\n\n      keys.forEach(function (key) {\n        return _this6.removeKey(key);\n      });\n    }\n    /**\n     * @method MongoObject.filterGenericKeys\n     * @param {Function} test - Test function\n     * @returns {undefined}\n     *\n     * Passes all affected keys to a test function, which\n     * should return false to remove whatever is affecting that key\n     */\n\n  }, {\n    key: \"filterGenericKeys\",\n    value: function filterGenericKeys(test) {\n      var _this7 = this;\n\n      var checkedKeys = [];\n      var keysToRemove = [];\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        var genericKey = _this7._genericAffectedKeys[position];\n\n        if (checkedKeys.indexOf(genericKey) === -1) {\n          checkedKeys.push(genericKey);\n\n          if (genericKey && !test(genericKey)) {\n            keysToRemove.push(genericKey);\n          }\n        }\n      });\n      keysToRemove.forEach(function (key) {\n        return _this7.removeGenericKey(key);\n      });\n    }\n    /**\n     * @method MongoObject.setValueForKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested non-generic key\n     */\n\n  }, {\n    key: \"setValueForKey\",\n    value: function setValueForKey(key, val) {\n      var _this8 = this;\n\n      // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n      Object.getOwnPropertyNames(this._affectedKeys).forEach(function (position) {\n        if (_this8._affectedKeys[position] === key) {\n          _this8.setValueForPosition(position, val);\n        }\n      });\n    }\n    /**\n     * @method MongoObject.setValueForGenericKey\n     * @param {String} key\n     * @param {Any} val\n     * @returns {undefined}\n     *\n     * Sets the value for every place in the object that affects\n     * the requested generic key\n     */\n\n  }, {\n    key: \"setValueForGenericKey\",\n    value: function setValueForGenericKey(key, val) {\n      var _this9 = this;\n\n      // We don't use getPositionForKey here because we want to be sure to\n      // set the value for all positions if there are multiple.\n      Object.getOwnPropertyNames(this._genericAffectedKeys).forEach(function (position) {\n        if (_this9._genericAffectedKeys[position] === key) {\n          _this9.setValueForPosition(position, val);\n        }\n      });\n    }\n  }, {\n    key: \"removeArrayItems\",\n    value: function removeArrayItems() {\n      // Traverse and pull out removed array items at this point\n      function traverse(obj) {\n        each(obj, function (val, indexOrProp) {\n          // Move deeper into the object\n          var next = obj[indexOrProp]; // If we can go no further, then quit\n\n          if (MongoObject.isBasicObject(next)) {\n            traverse(next);\n          } else if (Array.isArray(next)) {\n            obj[indexOrProp] = next.filter(function (item) {\n              return item !== REMOVED_MARKER;\n            });\n            traverse(obj[indexOrProp]);\n          }\n        });\n      }\n\n      traverse(this._obj);\n    }\n    /**\n     * @method MongoObject.getObject\n     * @returns {Object}\n     *\n     * Get the source object, potentially modified by other method calls on this\n     * MongoObject instance.\n     */\n\n  }, {\n    key: \"getObject\",\n    value: function getObject() {\n      return this._obj;\n    }\n    /**\n     * @method MongoObject.getFlatObject\n     * @returns {Object}\n     *\n     * Gets a flat object based on the MongoObject instance.\n     * In a flat object, the key is the name of the non-generic affectedKey,\n     * with mongo dot notation if necessary, and the value is the value for\n     * that key.\n     *\n     * With `keepArrays: true`, we don't flatten within arrays. Currently\n     * MongoDB does not see a key such as `a.0.b` and automatically assume\n     * an array. Instead it would create an object with key '0' if there\n     * wasn't already an array saved as the value of `a`, which is rarely\n     * if ever what we actually want. To avoid this confusion, we\n     * set entire arrays.\n     */\n\n  }, {\n    key: \"getFlatObject\",\n    value: function getFlatObject() {\n      var _this10 = this;\n\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$keepArrays = _ref2.keepArrays,\n          keepArrays = _ref2$keepArrays === void 0 ? false : _ref2$keepArrays;\n\n      var newObj = {};\n      Object.keys(this._affectedKeys).forEach(function (position) {\n        var affectedKey = _this10._affectedKeys[position];\n\n        if (typeof affectedKey === 'string' && (keepArrays === true && _this10._positionsInsideArrays.indexOf(position) === -1 && _this10._objectPositions.indexOf(position) === -1 || keepArrays !== true && _this10._parentPositions.indexOf(position) === -1)) {\n          newObj[affectedKey] = _this10.getValueForPosition(position);\n        }\n      });\n      return newObj;\n    }\n    /**\n     * @method MongoObject.affectsKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the non-generic key is affected by this object\n     */\n\n  }, {\n    key: \"affectsKey\",\n    value: function affectsKey(key) {\n      return !!this.getPositionForKey(key);\n    }\n    /**\n     * @method MongoObject.affectsGenericKey\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Returns true if the generic key is affected by this object\n     */\n\n  }, {\n    key: \"affectsGenericKey\",\n    value: function affectsGenericKey(key) {\n      var positions = Object.getOwnPropertyNames(this._genericAffectedKeys);\n\n      for (var index = 0; index < positions.length; index++) {\n        var position = positions[index];\n        if (this._genericAffectedKeys[position] === key) return true;\n      }\n\n      return false;\n    }\n    /**\n     * @method MongoObject.affectsGenericKeyImplicit\n     * @param {String} key\n     * @returns {Object}\n     *\n     * Like affectsGenericKey, but will return true if a child key is affected\n     */\n\n  }, {\n    key: \"affectsGenericKeyImplicit\",\n    value: function affectsGenericKeyImplicit(key) {\n      var positions = Object.getOwnPropertyNames(this._genericAffectedKeys);\n\n      for (var index = 0; index < positions.length; index++) {\n        var position = positions[index];\n        var affectedKey = this._genericAffectedKeys[position];\n        if (genericKeyAffectsOtherGenericKey(key, affectedKey)) return true;\n      }\n\n      return false;\n    }\n    /* STATIC */\n\n    /* Takes a specific string that uses mongo-style dot notation\n     * and returns a generic string equivalent. Replaces all numeric\n     * \"pieces\" with a dollar sign ($).\n     *\n     * @param {type} name\n     * @returns {String} Generic name.\n     */\n\n  }], [{\n    key: \"makeKeyGeneric\",\n    value: function makeKeyGeneric(key) {\n      if (typeof key !== 'string') return null;\n      return key.replace(/\\.[0-9]+(?=\\.|$)/g, '.$');\n    }\n    /** Takes a string representation of an object key and its value\n     *  and updates \"obj\" to contain that key with that value.\n     *\n     *  Example keys and results if val is 1:\n     *    \"a\" -> {a: 1}\n     *    \"a[b]\" -> {a: {b: 1}}\n     *    \"a[b][0]\" -> {a: {b: [1]}}\n     *    'a[b.0.c]' -> {a: {'b.0.c': 1}}\n     *\n     * @param {any} val\n     * @param {String} key\n     * @param {Object} obj\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"expandKey\",\n    value: function expandKey(val, key, obj) {\n      var subkeys = key.split('[');\n      var current = obj;\n\n      for (var i = 0, ln = subkeys.length; i < ln; i++) {\n        var subkey = subkeys[i];\n\n        if (subkey.slice(-1) === ']') {\n          subkey = subkey.slice(0, -1);\n        }\n\n        if (i === ln - 1) {\n          // Last iteration; time to set the value; always overwrite\n          current[subkey] = val; // If val is undefined, delete the property\n\n          if (val === undefined) delete current[subkey];\n        } else {\n          // See if the next piece is a number\n          var nextPiece = subkeys[i + 1];\n          nextPiece = parseInt(nextPiece, 10);\n\n          if (!current[subkey]) {\n            current[subkey] = Number.isNaN(nextPiece) ? {} : [];\n          }\n        }\n\n        current = current[subkey];\n      }\n    }\n  }, {\n    key: \"_keyToPosition\",\n    value: function _keyToPosition(key, wrapAll) {\n      var position = '';\n      key.split('.').forEach(function (piece, i) {\n        if (i === 0 && !wrapAll) {\n          position += piece;\n        } else {\n          position += \"[\".concat(piece, \"]\");\n        }\n      });\n      return position;\n    }\n    /**\n     * @method MongoObject._positionToKey\n     * @param {String} position\n     * @returns {String} The key that this position in an object would affect.\n     *\n     * This is different from MongoObject.prototype.getKeyForPosition in that\n     * this method does not depend on the requested position actually being\n     * present in any particular MongoObject.\n     */\n\n  }, {\n    key: \"_positionToKey\",\n    value: function _positionToKey(position) {\n      // XXX Probably a better way to do this, but this is\n      // foolproof for now.\n      var mDoc = new MongoObject({});\n      mDoc.setValueForPosition(position, 1); // Value doesn't matter\n\n      return mDoc.getKeyForPosition(position);\n    }\n    /**\n     * @method MongoObject.cleanNulls\n     * @public\n     * @param {Object} doc - Source object\n     * @returns {Object}\n     *\n     * Returns an object in which all properties with null, undefined, or empty\n     * string values have been removed, recursively.\n     */\n\n  }, {\n    key: \"cleanNulls\",\n    value: function cleanNulls(doc, isArray, keepEmptyStrings) {\n      var newDoc = isArray ? [] : {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n\n        if (!Array.isArray(val) && MongoObject.isBasicObject(val)) {\n          val = MongoObject.cleanNulls(val, false, keepEmptyStrings); // Recurse into plain objects\n\n          if (!isEmpty(val)) newDoc[key] = val;\n        } else if (Array.isArray(val)) {\n          val = MongoObject.cleanNulls(val, true, keepEmptyStrings); // Recurse into non-typed arrays\n\n          if (!isEmpty(val)) newDoc[key] = val;\n        } else if (!isNullUndefinedOrEmptyString(val)) {\n          newDoc[key] = val;\n        } else if (keepEmptyStrings && typeof val === 'string' && val.length === 0) {\n          newDoc[key] = val;\n        }\n      });\n      return newDoc;\n    }\n    /**\n     * @method MongoObject.reportNulls\n     * @public\n     * @param {Object} flatDoc - An object with no properties that are also objects.\n     * @returns {Object} An object in which the keys represent the keys in the\n     * original object that were null, undefined, or empty strings, and the value\n     * of each key is \"\".\n     */\n\n  }, {\n    key: \"reportNulls\",\n    value: function reportNulls(flatDoc, keepEmptyStrings) {\n      var nulls = {}; // Loop through the flat doc\n\n      Object.keys(flatDoc).forEach(function (key) {\n        var val = flatDoc[key];\n\n        if (val === null || val === undefined || !keepEmptyStrings && typeof val === 'string' && val.length === 0 // If value is an array in which all the values recursively are undefined, null,\n        // or an empty string\n        || Array.isArray(val) && MongoObject.cleanNulls(val, true, keepEmptyStrings).length === 0) {\n          nulls[key] = '';\n        }\n      });\n      return nulls;\n    }\n    /**\n     * @method MongoObject.docToModifier\n     * @public\n     * @param {Object} doc - An object to be converted into a MongoDB modifier\n     * @param {Object} [options] - Options\n     * @param {Boolean} [options.keepEmptyStrings] - Pass `true` to keep empty strings in the $set. Otherwise $unset them.\n     * @param {Boolean} [options.keepArrays] - Pass `true` to $set entire arrays. Otherwise the modifier will $set individual array items.\n     * @returns {Object} A MongoDB modifier.\n     *\n     * Converts an object into a modifier by flattening it, putting keys with\n     * null, undefined, and empty string values into `modifier.$unset`, and\n     * putting the rest of the keys into `modifier.$set`.\n     */\n\n  }, {\n    key: \"docToModifier\",\n    value: function docToModifier(doc) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$keepArrays = _ref3.keepArrays,\n          keepArrays = _ref3$keepArrays === void 0 ? false : _ref3$keepArrays,\n          _ref3$keepEmptyString = _ref3.keepEmptyStrings,\n          keepEmptyStrings = _ref3$keepEmptyString === void 0 ? false : _ref3$keepEmptyString;\n\n      // Flatten doc\n      var mDoc = new MongoObject(doc);\n      var flatDoc = mDoc.getFlatObject({\n        keepArrays: keepArrays\n      }); // Get a list of null, undefined, and empty string values so we can unset them instead\n\n      var nulls = MongoObject.reportNulls(flatDoc, keepEmptyStrings);\n      flatDoc = MongoObject.cleanNulls(flatDoc, false, keepEmptyStrings);\n      var modifier = {};\n      if (!isEmpty(flatDoc)) modifier.$set = flatDoc;\n      if (!isEmpty(nulls)) modifier.$unset = nulls;\n      return modifier;\n    }\n    /* Tests whether \"obj\" is an Object as opposed to\n     * something that inherits from Object\n     *\n     * @param {any} obj\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isBasicObject\",\n    value: function isBasicObject(obj) {\n      return obj === Object(obj) && Object.getPrototypeOf(obj) === Object.prototype;\n    }\n    /**\n     * @method MongoObject.objAffectsKey\n     * @public\n     * @param  {Object} obj\n     * @param  {String} key\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"objAffectsKey\",\n    value: function objAffectsKey(obj, key) {\n      var mDoc = new MongoObject(obj);\n      return mDoc.affectsKey(key);\n    }\n    /**\n     * @method MongoObject.objectsThatGenericKeyWillCreate\n     * @public\n     * @param  {String} genericKey\n     * @return {String[]} Array of other generic keys that would be created\n     *                    by this generic key\n     */\n\n  }, {\n    key: \"objectsThatGenericKeyWillCreate\",\n    value: function objectsThatGenericKeyWillCreate(genericKey) {\n      var objs = [];\n\n      do {\n        var lastDotPosition = genericKey.lastIndexOf('.');\n        genericKey = lastDotPosition === -1 ? '' : genericKey.slice(0, lastDotPosition);\n        if (genericKey.length && !genericKey.endsWith('.$')) objs.push(genericKey);\n      } while (genericKey.length);\n\n      return objs;\n    }\n    /**\n     * @method MongoObject.expandObj\n     * @public\n     * @param  {Object} doc\n     * @return {Object}\n     *\n     * Takes a flat object and returns an expanded version of it.\n     */\n\n  }, {\n    key: \"expandObj\",\n    value: function expandObj(doc) {\n      var newDoc = {};\n      Object.keys(doc).forEach(function (key) {\n        var val = doc[key];\n        var subkeys = key.split('.');\n        var subkeylen = subkeys.length;\n        var current = newDoc;\n\n        for (var i = 0; i < subkeylen; i++) {\n          var subkey = subkeys[i];\n\n          if (typeof current[subkey] !== 'undefined' && !isObject(current[subkey])) {\n            break; // Already set for some reason; leave it alone\n          }\n\n          if (i === subkeylen - 1) {\n            // Last iteration; time to set the value\n            current[subkey] = val;\n          } else {\n            // See if the next piece is a number\n            var nextPiece = subkeys[i + 1];\n            nextPiece = parseInt(nextPiece, 10);\n\n            if (Number.isNaN(nextPiece) && !isObject(current[subkey])) {\n              current[subkey] = {};\n            } else if (!Number.isNaN(nextPiece) && !Array.isArray(current[subkey])) {\n              current[subkey] = [];\n            }\n          }\n\n          current = current[subkey];\n        }\n      });\n      return newDoc;\n    }\n  }]);\n\n  return MongoObject;\n}();\n/* PRIVATE */\n\n\nexports[\"default\"] = MongoObject;\n\nfunction appendAffectedKey(affectedKey, key) {\n  if (key === '$each') return affectedKey;\n  return affectedKey ? \"\".concat(affectedKey, \".\").concat(key) : key;\n} // Extracts operator piece, if present, from position string\n\n\nfunction extractOp(position) {\n  var firstPositionPiece = position.slice(0, position.indexOf('['));\n  return firstPositionPiece.substring(0, 1) === '$' ? firstPositionPiece : null;\n}\n\nfunction genericKeyAffectsOtherGenericKey(key, affectedKey) {\n  // If the affected key is the test key\n  if (affectedKey === key) return true; // If the affected key implies the test key because the affected key\n  // starts with the test key followed by a period\n\n  if (affectedKey.substring(0, key.length + 1) === \"\".concat(key, \".\")) return true; // If the affected key implies the test key because the affected key\n  // starts with the test key and the test key ends with \".$\"\n\n  var lastTwo = key.slice(-2);\n  if (lastTwo === '.$' && key.slice(0, -2) === affectedKey) return true;\n  return false;\n}\n\nfunction isNullUndefinedOrEmptyString(val) {\n  return val === undefined || val === null || typeof val === 'string' && val.length === 0;\n}\n/** Used as references for various `Number` constants. */\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\nfunction isLength(value) {\n  return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;\n}\n\nfunction isArrayLike(value) {\n  return value != null && typeof value !== 'function' && isLength(value.length);\n}\n\nfunction each(collection, iteratee) {\n  if (collection == null) {\n    return;\n  }\n\n  if (Array.isArray(collection)) {\n    collection.forEach(iteratee);\n    return;\n  }\n\n  var iterable = Object(collection);\n\n  if (!isArrayLike(collection)) {\n    Object.keys(iterable).forEach(function (key) {\n      return iteratee(iterable[key], key, iterable);\n    });\n    return;\n  }\n\n  var index = -1;\n\n  while (++index < collection.length) {\n    if (iteratee(iterable[index], index, iterable) === false) {\n      break;\n    }\n  }\n}\n\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor;\n  var proto = typeof Ctor === 'function' && Ctor.prototype || Object.prototype;\n  return value === proto;\n}\n\nfunction isEmpty(value) {\n  if (value === null || value === undefined) {\n    return true;\n  }\n\n  if (Array.isArray(value) || typeof value === 'string') {\n    return !value.length;\n  }\n\n  var tag = Object.prototype.toString.call(value);\n\n  if (tag === '[object Map]' || tag === '[object Set]') {\n    return !value.size;\n  }\n\n  if (isPrototype(value)) {\n    return !Object.keys(value).length;\n  }\n  /* eslint-disable no-restricted-syntax */\n\n\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  /* eslint-enable no-restricted-syntax */\n\n\n  return true;\n}\n\nfunction isObject(value) {\n  var type = _typeof(value);\n\n  return value != null && (type === 'object' || type === 'function');\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}