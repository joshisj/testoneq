{"ast":null,"code":"import isEqual from 'lodash/isEqual';\nimport xorWith from 'lodash/xorWith';\nimport joinName from './joinName';\nexport default function changedKeys(root, valueA, valueB) {\n  if (!valueA || valueA !== Object(valueA) || valueA instanceof Date) return isEqual(valueA, valueB) ? [] : [root];\n  if (!valueB) return [root, ...Object.keys(valueA).map(key => joinName(root, key))];\n  const changed = xorWith(Object.entries(valueA), Object.entries(valueB), isEqual).map(pair => joinName(root, pair[0]));\n  if (changed.length) changed.unshift(root);\n  return changed;\n}","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/react-amplify/node_modules/uniforms/es6/changedKeys.js"],"names":["isEqual","xorWith","joinName","changedKeys","root","valueA","valueB","Object","Date","keys","map","key","changed","entries","pair","length","unshift"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2C;AACtD,MAAI,CAACD,MAAD,IAAWA,MAAM,KAAKE,MAAM,CAACF,MAAD,CAA5B,IAAwCA,MAAM,YAAYG,IAA9D,EACI,OAAOR,OAAO,CAACK,MAAD,EAASC,MAAT,CAAP,GAA0B,EAA1B,GAA+B,CAACF,IAAD,CAAtC;AACJ,MAAI,CAACE,MAAL,EACI,OAAO,CAACF,IAAD,EAAO,GAAGG,MAAM,CAACE,IAAP,CAAYJ,MAAZ,EAAoBK,GAApB,CAAwBC,GAAG,IAAIT,QAAQ,CAACE,IAAD,EAAOO,GAAP,CAAvC,CAAV,CAAP;AACJ,QAAMC,OAAO,GAAGX,OAAO,CAACM,MAAM,CAACM,OAAP,CAAeR,MAAf,CAAD,EAAyBE,MAAM,CAACM,OAAP,CAAeP,MAAf,CAAzB,EAAiDN,OAAjD,CAAP,CAAiEU,GAAjE,CAAqEI,IAAI,IAAIZ,QAAQ,CAACE,IAAD,EAAOU,IAAI,CAAC,CAAD,CAAX,CAArF,CAAhB;AACA,MAAIF,OAAO,CAACG,MAAZ,EACIH,OAAO,CAACI,OAAR,CAAgBZ,IAAhB;AACJ,SAAOQ,OAAP;AACH","sourcesContent":["import isEqual from 'lodash/isEqual';\nimport xorWith from 'lodash/xorWith';\nimport joinName from './joinName';\nexport default function changedKeys(root, valueA, valueB) {\n    if (!valueA || valueA !== Object(valueA) || valueA instanceof Date)\n        return isEqual(valueA, valueB) ? [] : [root];\n    if (!valueB)\n        return [root, ...Object.keys(valueA).map(key => joinName(root, key))];\n    const changed = xorWith(Object.entries(valueA), Object.entries(valueB), isEqual).map(pair => joinName(root, pair[0]));\n    if (changed.length)\n        changed.unshift(root);\n    return changed;\n}\n"]},"metadata":{},"sourceType":"module"}