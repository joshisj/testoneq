{"ast":null,"code":"import PropTypes from 'prop-types';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport merge from 'lodash/merge';\nimport noop from 'lodash/noop';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport BaseForm, { __childContextTypes, __childContextTypesBuild } from './BaseForm';\n\nconst childContextTypes = __childContextTypesBuild(merge({\n  state: {\n    validating: PropTypes.bool.isRequired\n  }\n}, __childContextTypes));\n\nconst Validated = parent => {\n  class _ extends parent {\n    constructor(...args) {\n      super(...args); // @ts-ignore\n\n      this.state = Object.assign(Object.assign({}, this.state), {\n        error: null,\n        validate: false,\n        validating: false,\n        validator: this.getChildContextSchema().getValidator(this.props.validator)\n      });\n      this.onValidate = this.validate = this.onValidate.bind(this);\n      this.onValidateModel = this.validateModel = this.onValidateModel.bind(this);\n    }\n\n    getChildContextError() {\n      return super.getChildContextError() || this.state.error;\n    }\n\n    getChildContextState() {\n      return Object.assign(Object.assign({}, super.getChildContextState()), {\n        validating: this.state.validating\n      });\n    }\n\n    getNativeFormProps() {\n      return omit(super.getNativeFormProps(), ['onValidate', 'validate', 'validator']);\n    }\n\n    componentWillReceiveProps({\n      model,\n      schema,\n      validate,\n      validator\n    }) {\n      // @ts-ignore\n      super.componentWillReceiveProps(...arguments);\n\n      if (this.props.schema !== schema || this.props.validator !== validator) {\n        this.setState(state => ({\n          validator: state.bridge.getValidator(validator)\n        }), () => {\n          if (shouldRevalidate(validate, this.state.validate)) {\n            this.onValidate().catch(noop);\n          }\n        });\n      } else if (!isEqual(this.props.model, model) && shouldRevalidate(validate, this.state.validate)) {\n        this.onValidateModel(model).catch(noop);\n      }\n    }\n\n    onChange(key, value) {\n      if (shouldRevalidate(this.props.validate, this.state.validate)) {\n        this.onValidate(key, value).catch(noop);\n      } // FIXME: https://github.com/vazco/uniforms/issues/293\n      // if (this.props.validate === 'onSubmit' && this.state.validate) {\n      //     this.setState(() => ({error: null}));\n      // }\n      // @ts-ignore\n\n\n      super.onChange(...arguments);\n    }\n\n    __reset(state) {\n      return Object.assign(Object.assign({}, super.__reset(state)), {\n        error: null,\n        validate: false,\n        validating: false\n      });\n    }\n\n    onSubmit(event) {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      const promise = new Promise((resolve, reject) => {\n        this.setState(() => ({\n          submitting: true,\n          validate: true\n        }), () => {\n          this.onValidate().then(() => {\n            super.onSubmit().then(resolve, error => {\n              this.setState({\n                error\n              });\n              reject(error);\n            });\n          }, reject);\n        });\n      });\n      promise // `onSubmit` should never reject, so we ignore this rejection.\n      .catch(noop).then(() => {\n        // It can be already unmounted.\n        if (this.mounted) // If validation fails, or `super.onSubmit` doesn't touch `submitting`, we need to reset it.\n          this.setState(state => state.submitting ? {\n            submitting: false\n          } : null);\n      });\n      return promise;\n    }\n\n    onValidate(key, value) {\n      let model = this.getChildContextModel();\n\n      if (model && key) {\n        model = set(cloneDeep(model), key, cloneDeep(value));\n      }\n\n      return this.onValidateModel(model);\n    }\n\n    onValidateModel(model) {\n      // @ts-ignore\n      model = this.getModel('validate', model);\n      let catched = this.props.error || null;\n\n      try {\n        this.state.validator(model);\n      } catch (error) {\n        catched = error;\n      }\n\n      this.setState({\n        validating: true\n      });\n      return new Promise((resolve, reject) => {\n        this.props.onValidate(model, catched, (error = catched) => {\n          // Do not copy error from props to state.\n          this.setState(() => ({\n            error: error === this.props.error ? null : error,\n            validating: false\n          }), () => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          });\n        });\n      });\n    }\n\n  }\n\n  _.Validated = Validated;\n  _.displayName = `Validated${parent.displayName}`;\n  _.defaultProps = Object.assign(Object.assign({}, parent.defaultProps), {\n    onValidate(model, error, callback) {\n      callback();\n    },\n\n    validate: 'onChangeAfterSubmit'\n  });\n  _.propTypes = Object.assign(Object.assign({}, parent.propTypes), {\n    onValidate: PropTypes.func.isRequired,\n    validator: PropTypes.any,\n    validate: PropTypes.oneOf(['onChange', 'onChangeAfterSubmit', 'onSubmit']).isRequired\n  });\n  _.childContextTypes = Object.assign(Object.assign({}, parent.childContextTypes || {}), {\n    uniforms: childContextTypes\n  });\n  return _;\n};\n\nfunction shouldRevalidate(inProps, inState) {\n  return inProps === 'onChange' || inProps === 'onChangeAfterSubmit' && inState;\n}\n\nexport default Validated(BaseForm);","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/oneq-account/oneq-prod/node_modules/uniforms/es6/ValidatedForm.js"],"names":["PropTypes","cloneDeep","isEqual","merge","noop","omit","set","BaseForm","__childContextTypes","__childContextTypesBuild","childContextTypes","state","validating","bool","isRequired","Validated","parent","_","constructor","args","Object","assign","error","validate","validator","getChildContextSchema","getValidator","props","onValidate","bind","onValidateModel","validateModel","getChildContextError","getChildContextState","getNativeFormProps","componentWillReceiveProps","model","schema","arguments","setState","bridge","shouldRevalidate","catch","onChange","key","value","__reset","onSubmit","event","preventDefault","stopPropagation","promise","Promise","resolve","reject","submitting","then","mounted","getChildContextModel","getModel","catched","displayName","defaultProps","callback","propTypes","func","any","oneOf","uniforms","inProps","inState"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport merge from 'lodash/merge';\nimport noop from 'lodash/noop';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport BaseForm, { __childContextTypes, __childContextTypesBuild, } from './BaseForm';\nconst childContextTypes = __childContextTypesBuild(merge({ state: { validating: PropTypes.bool.isRequired } }, __childContextTypes));\nconst Validated = (parent) => {\n    class _ extends parent {\n        constructor(...args) {\n            super(...args);\n            // @ts-ignore\n            this.state = Object.assign(Object.assign({}, this.state), { error: null, validate: false, validating: false, validator: this.getChildContextSchema().getValidator(this.props.validator) });\n            this.onValidate = this.validate = this.onValidate.bind(this);\n            this.onValidateModel = this.validateModel = this.onValidateModel.bind(this);\n        }\n        getChildContextError() {\n            return super.getChildContextError() || this.state.error;\n        }\n        getChildContextState() {\n            return Object.assign(Object.assign({}, super.getChildContextState()), { validating: this.state.validating });\n        }\n        getNativeFormProps() {\n            return omit(super.getNativeFormProps(), [\n                'onValidate',\n                'validate',\n                'validator',\n            ]);\n        }\n        componentWillReceiveProps({ model, schema, validate, validator }) {\n            // @ts-ignore\n            super.componentWillReceiveProps(...arguments);\n            if (this.props.schema !== schema || this.props.validator !== validator) {\n                this.setState((state) => ({ validator: state.bridge.getValidator(validator) }), () => {\n                    if (shouldRevalidate(validate, this.state.validate)) {\n                        this.onValidate().catch(noop);\n                    }\n                });\n            }\n            else if (!isEqual(this.props.model, model) &&\n                shouldRevalidate(validate, this.state.validate)) {\n                this.onValidateModel(model).catch(noop);\n            }\n        }\n        onChange(key, value) {\n            if (shouldRevalidate(this.props.validate, this.state.validate)) {\n                this.onValidate(key, value).catch(noop);\n            }\n            // FIXME: https://github.com/vazco/uniforms/issues/293\n            // if (this.props.validate === 'onSubmit' && this.state.validate) {\n            //     this.setState(() => ({error: null}));\n            // }\n            // @ts-ignore\n            super.onChange(...arguments);\n        }\n        __reset(state) {\n            return Object.assign(Object.assign({}, super.__reset(state)), { error: null, validate: false, validating: false });\n        }\n        onSubmit(event) {\n            if (event) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            const promise = new Promise((resolve, reject) => {\n                this.setState(() => ({ submitting: true, validate: true }), () => {\n                    this.onValidate().then(() => {\n                        super.onSubmit().then(resolve, (error) => {\n                            this.setState({ error });\n                            reject(error);\n                        });\n                    }, reject);\n                });\n            });\n            promise\n                // `onSubmit` should never reject, so we ignore this rejection.\n                .catch(noop)\n                .then(() => {\n                // It can be already unmounted.\n                if (this.mounted)\n                    // If validation fails, or `super.onSubmit` doesn't touch `submitting`, we need to reset it.\n                    this.setState((state) => state.submitting ? { submitting: false } : null);\n            });\n            return promise;\n        }\n        onValidate(key, value) {\n            let model = this.getChildContextModel();\n            if (model && key) {\n                model = set(cloneDeep(model), key, cloneDeep(value));\n            }\n            return this.onValidateModel(model);\n        }\n        onValidateModel(model) {\n            // @ts-ignore\n            model = this.getModel('validate', model);\n            let catched = this.props.error || null;\n            try {\n                this.state.validator(model);\n            }\n            catch (error) {\n                catched = error;\n            }\n            this.setState({ validating: true });\n            return new Promise((resolve, reject) => {\n                this.props.onValidate(model, catched, (error = catched) => {\n                    // Do not copy error from props to state.\n                    this.setState(() => ({\n                        error: error === this.props.error ? null : error,\n                        validating: false,\n                    }), () => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                });\n            });\n        }\n    }\n    _.Validated = Validated;\n    _.displayName = `Validated${parent.displayName}`;\n    _.defaultProps = Object.assign(Object.assign({}, parent.defaultProps), { onValidate(model, error, callback) {\n            callback();\n        }, validate: 'onChangeAfterSubmit' });\n    _.propTypes = Object.assign(Object.assign({}, parent.propTypes), { onValidate: PropTypes.func.isRequired, validator: PropTypes.any, validate: PropTypes.oneOf(['onChange', 'onChangeAfterSubmit', 'onSubmit'])\n            .isRequired });\n    _.childContextTypes = Object.assign(Object.assign({}, (parent.childContextTypes || {})), { uniforms: childContextTypes });\n    return _;\n};\nfunction shouldRevalidate(inProps, inState) {\n    return (inProps === 'onChange' || (inProps === 'onChangeAfterSubmit' && inState));\n}\nexport default Validated(BaseForm);\n"]},"metadata":{},"sourceType":"module"}