{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = requiredValidator;\n\nvar _SimpleSchema = require(\"../SimpleSchema\");\n\nvar _utility = require(\"../utility\"); // Check for missing required values. The general logic is this:\n// * If the operator is $unset or $rename, it's invalid.\n// * If the value is null, it's invalid.\n// * If the value is undefined and one of the following are true, it's invalid:\n//     * We're validating a key of a sub-object.\n//     * We're validating a key of an object that is an array item.\n//     * We're validating a document (as opposed to a modifier).\n//     * We're validating a key under the $set operator in a modifier, and it's an upsert.\n\n\nfunction requiredValidator() {\n  var definition = this.definition,\n      isInArrayItemObject = this.isInArrayItemObject,\n      isInSubObject = this.isInSubObject,\n      key = this.key,\n      obj = this.obj,\n      operator = this.operator,\n      value = this.value;\n  var optional = definition.optional;\n  if (optional) return; // If value is null, no matter what, we add required\n\n  if (value === null) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // If operator would remove, we add required\n\n  if (operator === '$unset' || operator === '$rename') return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // The rest of these apply only if the value is undefined\n\n  if (value !== undefined) return; // At this point, if it's a normal, non-modifier object, then a missing value is an error\n\n  if (!operator) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // Everything beyond this point deals with modifier objects only\n  // We can skip the required check for keys that are ancestors of those in $set or\n  // $setOnInsert because they will be created by MongoDB while setting.\n\n  var keysWithValueInSet = (0, _utility.getKeysWithValueInObj)(obj.$set, key);\n  if (keysWithValueInSet.length) return;\n  var keysWithValueInSetOnInsert = (0, _utility.getKeysWithValueInObj)(obj.$setOnInsert, key);\n  if (keysWithValueInSetOnInsert.length) return; // In the case of $set and $setOnInsert, the value may be undefined here\n  // but it is set in another operator. So check that first.\n\n  var fieldInfo = this.field(key);\n  if (fieldInfo.isSet && fieldInfo.value !== null) return; // Required if in an array or sub object\n\n  if (isInArrayItemObject || isInSubObject) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // If we've got this far with an undefined $set or $setOnInsert value, it's a required error.\n\n  if (operator === '$set' || operator === '$setOnInsert') return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/oneq-account/oneq-prod/node_modules/simpl-schema/dist/validation/requiredValidator.js"],"names":["Object","defineProperty","exports","value","default","requiredValidator","_SimpleSchema","require","_utility","definition","isInArrayItemObject","isInSubObject","key","obj","operator","optional","SimpleSchema","ErrorTypes","REQUIRED","undefined","keysWithValueInSet","getKeysWithValueInObj","$set","length","keysWithValueInSetOnInsert","$setOnInsert","fieldInfo","field","isSet","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,iBAAT,GAA6B;AAC3B,MAAII,UAAU,GAAG,KAAKA,UAAtB;AAAA,MACIC,mBAAmB,GAAG,KAAKA,mBAD/B;AAAA,MAEIC,aAAa,GAAG,KAAKA,aAFzB;AAAA,MAGIC,GAAG,GAAG,KAAKA,GAHf;AAAA,MAIIC,GAAG,GAAG,KAAKA,GAJf;AAAA,MAKIC,QAAQ,GAAG,KAAKA,QALpB;AAAA,MAMIX,KAAK,GAAG,KAAKA,KANjB;AAOA,MAAIY,QAAQ,GAAGN,UAAU,CAACM,QAA1B;AACA,MAAIA,QAAJ,EAAc,OATa,CASL;;AAEtB,MAAIZ,KAAK,KAAK,IAAd,EAAoB,OAAOG,aAAa,CAACU,YAAd,CAA2BC,UAA3B,CAAsCC,QAA7C,CAXO,CAWgD;;AAE3E,MAAIJ,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,SAA1C,EAAqD,OAAOR,aAAa,CAACU,YAAd,CAA2BC,UAA3B,CAAsCC,QAA7C,CAb1B,CAaiF;;AAE5G,MAAIf,KAAK,KAAKgB,SAAd,EAAyB,OAfE,CAeM;;AAEjC,MAAI,CAACL,QAAL,EAAe,OAAOR,aAAa,CAACU,YAAd,CAA2BC,UAA3B,CAAsCC,QAA7C,CAjBY,CAiB2C;AACtE;AACA;;AAEA,MAAIE,kBAAkB,GAAG,CAAC,GAAGZ,QAAQ,CAACa,qBAAb,EAAoCR,GAAG,CAACS,IAAxC,EAA8CV,GAA9C,CAAzB;AACA,MAAIQ,kBAAkB,CAACG,MAAvB,EAA+B;AAC/B,MAAIC,0BAA0B,GAAG,CAAC,GAAGhB,QAAQ,CAACa,qBAAb,EAAoCR,GAAG,CAACY,YAAxC,EAAsDb,GAAtD,CAAjC;AACA,MAAIY,0BAA0B,CAACD,MAA/B,EAAuC,OAxBZ,CAwBoB;AAC/C;;AAEA,MAAIG,SAAS,GAAG,KAAKC,KAAL,CAAWf,GAAX,CAAhB;AACA,MAAIc,SAAS,CAACE,KAAV,IAAmBF,SAAS,CAACvB,KAAV,KAAoB,IAA3C,EAAiD,OA5BtB,CA4B8B;;AAEzD,MAAIO,mBAAmB,IAAIC,aAA3B,EAA0C,OAAOL,aAAa,CAACU,YAAd,CAA2BC,UAA3B,CAAsCC,QAA7C,CA9Bf,CA8BsE;;AAEjG,MAAIJ,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,cAAxC,EAAwD,OAAOR,aAAa,CAACU,YAAd,CAA2BC,UAA3B,CAAsCC,QAA7C;AACzD;;AAEDW,MAAM,CAAC3B,OAAP,GAAiBA,OAAO,CAACE,OAAzB;AACAyB,MAAM,CAAC3B,OAAP,CAAeE,OAAf,GAAyBF,OAAO,CAACE,OAAjC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = requiredValidator;\n\nvar _SimpleSchema = require(\"../SimpleSchema\");\n\nvar _utility = require(\"../utility\");\n\n// Check for missing required values. The general logic is this:\n// * If the operator is $unset or $rename, it's invalid.\n// * If the value is null, it's invalid.\n// * If the value is undefined and one of the following are true, it's invalid:\n//     * We're validating a key of a sub-object.\n//     * We're validating a key of an object that is an array item.\n//     * We're validating a document (as opposed to a modifier).\n//     * We're validating a key under the $set operator in a modifier, and it's an upsert.\nfunction requiredValidator() {\n  var definition = this.definition,\n      isInArrayItemObject = this.isInArrayItemObject,\n      isInSubObject = this.isInSubObject,\n      key = this.key,\n      obj = this.obj,\n      operator = this.operator,\n      value = this.value;\n  var optional = definition.optional;\n  if (optional) return; // If value is null, no matter what, we add required\n\n  if (value === null) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // If operator would remove, we add required\n\n  if (operator === '$unset' || operator === '$rename') return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // The rest of these apply only if the value is undefined\n\n  if (value !== undefined) return; // At this point, if it's a normal, non-modifier object, then a missing value is an error\n\n  if (!operator) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // Everything beyond this point deals with modifier objects only\n  // We can skip the required check for keys that are ancestors of those in $set or\n  // $setOnInsert because they will be created by MongoDB while setting.\n\n  var keysWithValueInSet = (0, _utility.getKeysWithValueInObj)(obj.$set, key);\n  if (keysWithValueInSet.length) return;\n  var keysWithValueInSetOnInsert = (0, _utility.getKeysWithValueInObj)(obj.$setOnInsert, key);\n  if (keysWithValueInSetOnInsert.length) return; // In the case of $set and $setOnInsert, the value may be undefined here\n  // but it is set in another operator. So check that first.\n\n  var fieldInfo = this.field(key);\n  if (fieldInfo.isSet && fieldInfo.value !== null) return; // Required if in an array or sub object\n\n  if (isInArrayItemObject || isInSubObject) return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED; // If we've got this far with an undefined $set or $setOnInsert value, it's a required error.\n\n  if (operator === '$set' || operator === '$setOnInsert') return _SimpleSchema.SimpleSchema.ErrorTypes.REQUIRED;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}