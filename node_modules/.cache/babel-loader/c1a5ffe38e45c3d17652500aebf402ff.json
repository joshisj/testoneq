{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport isPlainObject from 'lodash/isPlainObject';\nimport mapValues from 'lodash/mapValues';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport randomIds from './randomIds';\nimport createSchemaBridge from './createSchemaBridge';\nimport changedKeys from './changedKeys';\nexport const __childContextTypes = {\n  name: PropTypes.arrayOf(PropTypes.string).isRequired,\n  error: PropTypes.object,\n  model: PropTypes.object.isRequired,\n  schema: {\n    getError: PropTypes.func.isRequired,\n    getErrorMessage: PropTypes.func.isRequired,\n    getErrorMessages: PropTypes.func.isRequired,\n    getField: PropTypes.func.isRequired,\n    getInitialValue: PropTypes.func.isRequired,\n    getProps: PropTypes.func.isRequired,\n    getSubfields: PropTypes.func.isRequired,\n    getType: PropTypes.func.isRequired,\n    getValidator: PropTypes.func.isRequired\n  },\n  state: {\n    changed: PropTypes.bool.isRequired,\n    changedMap: PropTypes.object.isRequired,\n    submitting: PropTypes.bool.isRequired,\n    label: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    placeholder: PropTypes.bool.isRequired,\n    showInlineError: PropTypes.bool.isRequired\n  },\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  randomId: PropTypes.func.isRequired\n};\nexport const __childContextTypesBuild = type => isPlainObject(type) ? PropTypes.shape(mapValues(type, __childContextTypesBuild)).isRequired : type;\nexport default class BaseForm extends Component {\n  constructor() {\n    // @ts-ignore\n    super(...arguments);\n    this.state = {\n      bridge: createSchemaBridge(this.props.schema),\n      changed: null,\n      changedMap: {},\n      resetCount: 0,\n      submitting: false\n    };\n    this.mounted = false;\n    this.randomId = randomIds(this.props.id);\n    this.onReset = this.reset = this.onReset.bind(this);\n    this.onChange = this.change = this.onChange.bind(this);\n    this.onSubmit = this.submit = this.onSubmit.bind(this); // TODO: It shouldn't be here\n\n    const getModel = this.getModel.bind(this);\n\n    this.getModel = (mode = null, model = getModel(mode)) => mode !== null && this.props.modelTransform ? this.props.modelTransform(mode, model) : model;\n  }\n\n  getChildContext() {\n    return {\n      uniforms: {\n        name: this.getChildContextName(),\n        error: this.getChildContextError(),\n        model: this.getChildContextModel(),\n        state: this.getChildContextState(),\n        schema: this.getChildContextSchema(),\n        onChange: this.getChildContextOnChange(),\n        onSubmit: this.getChildContextOnSubmit(),\n        randomId: this.randomId\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.mounted = true;\n    this.setState(() => ({}), () => this.setState(() => ({\n      changed: false,\n      changedMap: {}\n    })));\n  }\n\n  componentWillReceiveProps({\n    schema\n  }) {\n    if (this.props.schema !== schema) {\n      this.setState(() => ({\n        bridge: createSchemaBridge(schema)\n      }));\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getChildContextName() {\n    return [];\n  }\n\n  getChildContextError() {\n    return this.props.error;\n  }\n\n  getChildContextModel() {\n    return this.getModel('form');\n  }\n\n  getChildContextState() {\n    return {\n      changed: !!this.state.changed,\n      changedMap: this.state.changedMap,\n      submitting: this.state.submitting,\n      label: !!this.props.label,\n      disabled: !!this.props.disabled,\n      placeholder: !!this.props.placeholder,\n      showInlineError: !!this.props.showInlineError\n    };\n  }\n\n  getChildContextSchema() {\n    return this.state.bridge;\n  }\n\n  getChildContextOnChange() {\n    return this.onChange;\n  }\n\n  getChildContextOnSubmit() {\n    return this.onSubmit;\n  }\n\n  getModel(mode) {\n    return this.props.model;\n  }\n\n  getChangedKeys(root, valueA, valueB) {\n    return changedKeys(root, valueA, valueB);\n  }\n\n  getNativeFormProps() {\n    const props = omit(this.props, ['autosave', 'autosaveDelay', 'disabled', 'error', 'label', 'model', 'modelTransform', 'onChange', 'onSubmit', 'onSubmitFailure', 'onSubmitSuccess', 'placeholder', 'schema', 'showInlineError']);\n    return Object.assign(Object.assign({}, props), {\n      onSubmit: this.onSubmit,\n      key: `reset-${this.state.resetCount}`\n    });\n  }\n\n  onChange(key, value) {\n    // Do not set `changed` before componentDidMount\n    if (this.state.changed !== null) {\n      // @ts-ignore\n      this.state.changed = true; // eslint-disable-line react/no-direct-mutation-state\n\n      this.getChangedKeys(key, value, get(this.getModel(), key)).forEach(key => this.setState(state => ({\n        changedMap: set(cloneDeep(state.changedMap), key, {})\n      })));\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(key, value);\n    } // Do not call `onSubmit` before componentDidMount\n\n\n    if (this.state.changed !== null && this.props.autosave) {\n      if (this.delayId) {\n        this.delayId = clearTimeout(this.delayId);\n      }\n\n      if (this.props.autosaveDelay > 0) {\n        this.delayId = setTimeout(this.onSubmit, this.props.autosaveDelay);\n      } else {\n        this.onSubmit();\n      }\n    }\n  }\n\n  __reset(state) {\n    return {\n      changed: false,\n      changedMap: {},\n      submitting: false,\n      resetCount: state.resetCount + 1\n    };\n  }\n\n  onReset() {\n    this.setState(this.__reset);\n  }\n\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    const result = this.props.onSubmit && this.props.onSubmit(this.getModel('submit')); // Set the `submitting` state only if onSubmit is async so we don't cause an unnecessary re-render\n\n    let submitting;\n\n    if (result && isFunction(result.then)) {\n      this.setState({\n        submitting: true\n      });\n      submitting = result.finally(() => this.setState({\n        submitting: false\n      }));\n    } else {\n      submitting = Promise.resolve(result);\n    }\n\n    return submitting.then(this.props.onSubmitSuccess, this.props.onSubmitFailure);\n  }\n\n  render() {\n    return React.createElement(\"form\", Object.assign({}, this.getNativeFormProps()));\n  }\n\n}\nBaseForm.displayName = 'Form';\nBaseForm.propTypes = {\n  error: PropTypes.object,\n  model: PropTypes.object,\n  schema: PropTypes.any.isRequired,\n  modelTransform: PropTypes.func,\n  onChange: PropTypes.func,\n  onSubmit: PropTypes.func,\n  onSubmitFailure: PropTypes.func,\n  onSubmitSuccess: PropTypes.func,\n  label: PropTypes.bool,\n  disabled: PropTypes.bool,\n  placeholder: PropTypes.bool,\n  showInlineError: PropTypes.bool,\n  autosave: PropTypes.bool,\n  autosaveDelay: PropTypes.number\n};\nBaseForm.childContextTypes = {\n  uniforms: __childContextTypesBuild(__childContextTypes)\n};\nBaseForm.defaultProps = {\n  model: {},\n  label: true,\n  autosave: false,\n  autosaveDelay: 0,\n  noValidate: true\n};","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/oneq-account/prod/node_modules/uniforms/es6/BaseForm.js"],"names":["PropTypes","React","Component","cloneDeep","get","isFunction","isPlainObject","mapValues","omit","set","randomIds","createSchemaBridge","changedKeys","__childContextTypes","name","arrayOf","string","isRequired","error","object","model","schema","getError","func","getErrorMessage","getErrorMessages","getField","getInitialValue","getProps","getSubfields","getType","getValidator","state","changed","bool","changedMap","submitting","label","disabled","placeholder","showInlineError","onChange","onSubmit","randomId","__childContextTypesBuild","type","shape","BaseForm","constructor","arguments","bridge","props","resetCount","mounted","id","onReset","reset","bind","change","submit","getModel","mode","modelTransform","getChildContext","uniforms","getChildContextName","getChildContextError","getChildContextModel","getChildContextState","getChildContextSchema","getChildContextOnChange","getChildContextOnSubmit","componentWillMount","setState","componentWillReceiveProps","componentWillUnmount","getChangedKeys","root","valueA","valueB","getNativeFormProps","Object","assign","key","value","forEach","autosave","delayId","clearTimeout","autosaveDelay","setTimeout","__reset","event","preventDefault","stopPropagation","result","then","finally","Promise","resolve","onSubmitSuccess","onSubmitFailure","render","createElement","displayName","propTypes","any","number","childContextTypes","defaultProps","noValidate"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport isPlainObject from 'lodash/isPlainObject';\nimport mapValues from 'lodash/mapValues';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport randomIds from './randomIds';\nimport createSchemaBridge from './createSchemaBridge';\nimport changedKeys from './changedKeys';\nexport const __childContextTypes = {\n    name: PropTypes.arrayOf(PropTypes.string).isRequired,\n    error: PropTypes.object,\n    model: PropTypes.object.isRequired,\n    schema: {\n        getError: PropTypes.func.isRequired,\n        getErrorMessage: PropTypes.func.isRequired,\n        getErrorMessages: PropTypes.func.isRequired,\n        getField: PropTypes.func.isRequired,\n        getInitialValue: PropTypes.func.isRequired,\n        getProps: PropTypes.func.isRequired,\n        getSubfields: PropTypes.func.isRequired,\n        getType: PropTypes.func.isRequired,\n        getValidator: PropTypes.func.isRequired,\n    },\n    state: {\n        changed: PropTypes.bool.isRequired,\n        changedMap: PropTypes.object.isRequired,\n        submitting: PropTypes.bool.isRequired,\n        label: PropTypes.bool.isRequired,\n        disabled: PropTypes.bool.isRequired,\n        placeholder: PropTypes.bool.isRequired,\n        showInlineError: PropTypes.bool.isRequired,\n    },\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    randomId: PropTypes.func.isRequired,\n};\nexport const __childContextTypesBuild = (type) => isPlainObject(type)\n    ? PropTypes.shape(mapValues(type, __childContextTypesBuild)).isRequired\n    : type;\nexport default class BaseForm extends Component {\n    constructor() {\n        // @ts-ignore\n        super(...arguments);\n        this.state = {\n            bridge: createSchemaBridge(this.props.schema),\n            changed: null,\n            changedMap: {},\n            resetCount: 0,\n            submitting: false,\n        };\n        this.mounted = false;\n        this.randomId = randomIds(this.props.id);\n        this.onReset = this.reset = this.onReset.bind(this);\n        this.onChange = this.change = this.onChange.bind(this);\n        this.onSubmit = this.submit = this.onSubmit.bind(this);\n        // TODO: It shouldn't be here\n        const getModel = this.getModel.bind(this);\n        this.getModel = (mode = null, model = getModel(mode)) => mode !== null && this.props.modelTransform\n            ? this.props.modelTransform(mode, model)\n            : model;\n    }\n    getChildContext() {\n        return {\n            uniforms: {\n                name: this.getChildContextName(),\n                error: this.getChildContextError(),\n                model: this.getChildContextModel(),\n                state: this.getChildContextState(),\n                schema: this.getChildContextSchema(),\n                onChange: this.getChildContextOnChange(),\n                onSubmit: this.getChildContextOnSubmit(),\n                randomId: this.randomId,\n            },\n        };\n    }\n    componentWillMount() {\n        this.mounted = true;\n        this.setState(() => ({}), () => this.setState(() => ({ changed: false, changedMap: {} })));\n    }\n    componentWillReceiveProps({ schema }) {\n        if (this.props.schema !== schema) {\n            this.setState(() => ({ bridge: createSchemaBridge(schema) }));\n        }\n    }\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n    getChildContextName() {\n        return [];\n    }\n    getChildContextError() {\n        return this.props.error;\n    }\n    getChildContextModel() {\n        return this.getModel('form');\n    }\n    getChildContextState() {\n        return {\n            changed: !!this.state.changed,\n            changedMap: this.state.changedMap,\n            submitting: this.state.submitting,\n            label: !!this.props.label,\n            disabled: !!this.props.disabled,\n            placeholder: !!this.props.placeholder,\n            showInlineError: !!this.props.showInlineError,\n        };\n    }\n    getChildContextSchema() {\n        return this.state.bridge;\n    }\n    getChildContextOnChange() {\n        return this.onChange;\n    }\n    getChildContextOnSubmit() {\n        return this.onSubmit;\n    }\n    getModel(mode) {\n        return this.props.model;\n    }\n    getChangedKeys(root, valueA, valueB) {\n        return changedKeys(root, valueA, valueB);\n    }\n    getNativeFormProps() {\n        const props = omit(this.props, [\n            'autosave',\n            'autosaveDelay',\n            'disabled',\n            'error',\n            'label',\n            'model',\n            'modelTransform',\n            'onChange',\n            'onSubmit',\n            'onSubmitFailure',\n            'onSubmitSuccess',\n            'placeholder',\n            'schema',\n            'showInlineError',\n        ]);\n        return Object.assign(Object.assign({}, props), { onSubmit: this.onSubmit, key: `reset-${this.state.resetCount}` });\n    }\n    onChange(key, value) {\n        // Do not set `changed` before componentDidMount\n        if (this.state.changed !== null) {\n            // @ts-ignore\n            this.state.changed = true; // eslint-disable-line react/no-direct-mutation-state\n            this.getChangedKeys(key, value, get(this.getModel(), key)).forEach(key => this.setState(state => ({\n                changedMap: set(cloneDeep(state.changedMap), key, {}),\n            })));\n        }\n        if (this.props.onChange) {\n            this.props.onChange(key, value);\n        }\n        // Do not call `onSubmit` before componentDidMount\n        if (this.state.changed !== null && this.props.autosave) {\n            if (this.delayId) {\n                this.delayId = clearTimeout(this.delayId);\n            }\n            if (this.props.autosaveDelay > 0) {\n                this.delayId = setTimeout(this.onSubmit, this.props.autosaveDelay);\n            }\n            else {\n                this.onSubmit();\n            }\n        }\n    }\n    __reset(state) {\n        return {\n            changed: false,\n            changedMap: {},\n            submitting: false,\n            resetCount: state.resetCount + 1,\n        };\n    }\n    onReset() {\n        this.setState(this.__reset);\n    }\n    onSubmit(event) {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        const result = this.props.onSubmit && this.props.onSubmit(this.getModel('submit'));\n        // Set the `submitting` state only if onSubmit is async so we don't cause an unnecessary re-render\n        let submitting;\n        if (result && isFunction(result.then)) {\n            this.setState({ submitting: true });\n            submitting = result.finally(() => this.setState({ submitting: false }));\n        }\n        else {\n            submitting = Promise.resolve(result);\n        }\n        return submitting.then(this.props.onSubmitSuccess, this.props.onSubmitFailure);\n    }\n    render() {\n        return React.createElement(\"form\", Object.assign({}, this.getNativeFormProps()));\n    }\n}\nBaseForm.displayName = 'Form';\nBaseForm.propTypes = {\n    error: PropTypes.object,\n    model: PropTypes.object,\n    schema: PropTypes.any.isRequired,\n    modelTransform: PropTypes.func,\n    onChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onSubmitFailure: PropTypes.func,\n    onSubmitSuccess: PropTypes.func,\n    label: PropTypes.bool,\n    disabled: PropTypes.bool,\n    placeholder: PropTypes.bool,\n    showInlineError: PropTypes.bool,\n    autosave: PropTypes.bool,\n    autosaveDelay: PropTypes.number,\n};\nBaseForm.childContextTypes = {\n    uniforms: __childContextTypesBuild(__childContextTypes),\n};\nBaseForm.defaultProps = {\n    model: {},\n    label: true,\n    autosave: false,\n    autosaveDelay: 0,\n    noValidate: true,\n};\n"]},"metadata":{},"sourceType":"module"}