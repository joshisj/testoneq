{"ast":null,"code":"import * as PropTypes from 'prop-types';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport ValidatedQuickForm from './ValidatedQuickForm';\n\nconst Auto = parent => {\n  class _ extends parent {\n    constructor(...args) {\n      super(...args); // @ts-ignore\n\n      this.state = Object.assign(Object.assign({}, this.state), {\n        model: this.props.model,\n        modelSync: this.props.model\n      });\n    }\n\n    componentWillReceiveProps({\n      model\n    }) {\n      // @ts-ignore\n      super.componentWillReceiveProps(...arguments);\n\n      if (!isEqual(this.props.model, model)) {\n        this.setState(() => ({\n          model,\n          modelSync: model\n        }));\n      }\n    }\n\n    getNativeFormProps() {\n      return omit(super.getNativeFormProps(), ['onChangeModel']);\n    }\n\n    getModel(mode) {\n      return mode === 'form' ? this.state.modelSync : this.state.model;\n    }\n\n    onChange(key, value) {\n      const updateState = state => ({\n        modelSync: set(cloneDeep(state.modelSync), key, value)\n      });\n\n      const updateModel = state => {\n        if (this.props.onChangeModel) {\n          this.props.onChangeModel(state.modelSync);\n        }\n\n        return {\n          model: state.modelSync\n        };\n      }; // Before componentDidMount, every call to onChange should call BaseForm#onChange synchronously\n\n\n      if (this.state.changed === null) {\n        this.setState(updateState);\n        super.onChange(key, value);\n        this.setState(updateModel);\n      } else {\n        this.setState(updateState, () => {\n          super.onChange(key, value);\n          this.setState(updateModel);\n        });\n      }\n    }\n\n    __reset(state) {\n      return Object.assign(Object.assign({}, super.__reset(state)), {\n        model: this.props.model,\n        modelSync: this.props.model\n      });\n    }\n\n    onValidate() {\n      // @ts-ignore\n      return this.onValidateModel(this.getChildContextModel());\n    }\n\n  }\n\n  _.Auto = Auto;\n  _.displayName = `Auto${parent.displayName}`;\n  _.propTypes = Object.assign(Object.assign({}, parent.propTypes), {\n    onChangeModel: PropTypes.func\n  });\n  return _;\n};\n\nexport default Auto(ValidatedQuickForm);","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/node_modules/uniforms/es6/AutoForm.js"],"names":["PropTypes","cloneDeep","isEqual","omit","set","ValidatedQuickForm","Auto","parent","_","constructor","args","state","Object","assign","model","props","modelSync","componentWillReceiveProps","arguments","setState","getNativeFormProps","getModel","mode","onChange","key","value","updateState","updateModel","onChangeModel","changed","__reset","onValidate","onValidateModel","getChildContextModel","displayName","propTypes","func"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport ValidatedQuickForm from './ValidatedQuickForm';\nconst Auto = (parent) => {\n    class _ extends parent {\n        constructor(...args) {\n            super(...args);\n            // @ts-ignore\n            this.state = Object.assign(Object.assign({}, this.state), { model: this.props.model, modelSync: this.props.model });\n        }\n        componentWillReceiveProps({ model }) {\n            // @ts-ignore\n            super.componentWillReceiveProps(...arguments);\n            if (!isEqual(this.props.model, model)) {\n                this.setState(() => ({ model, modelSync: model }));\n            }\n        }\n        getNativeFormProps() {\n            return omit(super.getNativeFormProps(), ['onChangeModel']);\n        }\n        getModel(mode) {\n            return mode === 'form' ? this.state.modelSync : this.state.model;\n        }\n        onChange(key, value) {\n            const updateState = (state) => ({\n                modelSync: set(cloneDeep(state.modelSync), key, value),\n            });\n            const updateModel = (state) => {\n                if (this.props.onChangeModel) {\n                    this.props.onChangeModel(state.modelSync);\n                }\n                return { model: state.modelSync };\n            };\n            // Before componentDidMount, every call to onChange should call BaseForm#onChange synchronously\n            if (this.state.changed === null) {\n                this.setState(updateState);\n                super.onChange(key, value);\n                this.setState(updateModel);\n            }\n            else {\n                this.setState(updateState, () => {\n                    super.onChange(key, value);\n                    this.setState(updateModel);\n                });\n            }\n        }\n        __reset(state) {\n            return Object.assign(Object.assign({}, super.__reset(state)), { model: this.props.model, modelSync: this.props.model });\n        }\n        onValidate() {\n            // @ts-ignore\n            return this.onValidateModel(this.getChildContextModel());\n        }\n    }\n    _.Auto = Auto;\n    _.displayName = `Auto${parent.displayName}`;\n    _.propTypes = Object.assign(Object.assign({}, parent.propTypes), { onChangeModel: PropTypes.func });\n    return _;\n};\nexport default Auto(ValidatedQuickForm);\n"]},"metadata":{},"sourceType":"module"}