{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = doStringChecks;\n\nvar _SimpleSchema = require(\"../../SimpleSchema\");\n\nfunction doStringChecks(def, keyValue) {\n  // Is it a String?\n  if (typeof keyValue !== 'string') {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: 'String'\n    };\n  } // Is the string too long?\n\n\n  if (def.max !== null && def.max < keyValue.length) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING,\n      max: def.max\n    };\n  } // Is the string too short?\n\n\n  if (def.min !== null && def.min > keyValue.length) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.MIN_STRING,\n      min: def.min\n    };\n  } // Does the string match the regular expression?\n\n\n  if (def.regEx instanceof RegExp && !def.regEx.test(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.FAILED_REGULAR_EXPRESSION,\n      regExp: def.regEx.toString()\n    };\n  } // If regEx is an array of regular expressions, does the string match all of them?\n\n\n  if (Array.isArray(def.regEx)) {\n    var regExError;\n    def.regEx.every(function (re) {\n      if (!re.test(keyValue)) {\n        regExError = {\n          type: _SimpleSchema.SimpleSchema.ErrorTypes.FAILED_REGULAR_EXPRESSION,\n          regExp: re.toString()\n        };\n        return false;\n      }\n\n      return true;\n    });\n    if (regExError) return regExError;\n  }\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/oneq-account/prod/node_modules/simpl-schema/dist/validation/typeValidator/doStringChecks.js"],"names":["Object","defineProperty","exports","value","default","doStringChecks","_SimpleSchema","require","def","keyValue","type","SimpleSchema","ErrorTypes","EXPECTED_TYPE","dataType","max","length","MAX_STRING","min","MIN_STRING","regEx","RegExp","test","FAILED_REGULAR_EXPRESSION","regExp","toString","Array","isArray","regExError","every","re","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AAEA,SAASF,cAAT,CAAwBG,GAAxB,EAA6BC,QAA7B,EAAuC;AACrC;AACA,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAO;AACLC,MAAAA,IAAI,EAAEJ,aAAa,CAACK,YAAd,CAA2BC,UAA3B,CAAsCC,aADvC;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID,GAPoC,CAOnC;;;AAGF,MAAIN,GAAG,CAACO,GAAJ,KAAY,IAAZ,IAAoBP,GAAG,CAACO,GAAJ,GAAUN,QAAQ,CAACO,MAA3C,EAAmD;AACjD,WAAO;AACLN,MAAAA,IAAI,EAAEJ,aAAa,CAACK,YAAd,CAA2BC,UAA3B,CAAsCK,UADvC;AAELF,MAAAA,GAAG,EAAEP,GAAG,CAACO;AAFJ,KAAP;AAID,GAfoC,CAenC;;;AAGF,MAAIP,GAAG,CAACU,GAAJ,KAAY,IAAZ,IAAoBV,GAAG,CAACU,GAAJ,GAAUT,QAAQ,CAACO,MAA3C,EAAmD;AACjD,WAAO;AACLN,MAAAA,IAAI,EAAEJ,aAAa,CAACK,YAAd,CAA2BC,UAA3B,CAAsCO,UADvC;AAELD,MAAAA,GAAG,EAAEV,GAAG,CAACU;AAFJ,KAAP;AAID,GAvBoC,CAuBnC;;;AAGF,MAAIV,GAAG,CAACY,KAAJ,YAAqBC,MAArB,IAA+B,CAACb,GAAG,CAACY,KAAJ,CAAUE,IAAV,CAAeb,QAAf,CAApC,EAA8D;AAC5D,WAAO;AACLC,MAAAA,IAAI,EAAEJ,aAAa,CAACK,YAAd,CAA2BC,UAA3B,CAAsCW,yBADvC;AAELC,MAAAA,MAAM,EAAEhB,GAAG,CAACY,KAAJ,CAAUK,QAAV;AAFH,KAAP;AAID,GA/BoC,CA+BnC;;;AAGF,MAAIC,KAAK,CAACC,OAAN,CAAcnB,GAAG,CAACY,KAAlB,CAAJ,EAA8B;AAC5B,QAAIQ,UAAJ;AACApB,IAAAA,GAAG,CAACY,KAAJ,CAAUS,KAAV,CAAgB,UAAUC,EAAV,EAAc;AAC5B,UAAI,CAACA,EAAE,CAACR,IAAH,CAAQb,QAAR,CAAL,EAAwB;AACtBmB,QAAAA,UAAU,GAAG;AACXlB,UAAAA,IAAI,EAAEJ,aAAa,CAACK,YAAd,CAA2BC,UAA3B,CAAsCW,yBADjC;AAEXC,UAAAA,MAAM,EAAEM,EAAE,CAACL,QAAH;AAFG,SAAb;AAIA,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD,KAVD;AAWA,QAAIG,UAAJ,EAAgB,OAAOA,UAAP;AACjB;AACF;;AAEDG,MAAM,CAAC7B,OAAP,GAAiBA,OAAO,CAACE,OAAzB;AACA2B,MAAM,CAAC7B,OAAP,CAAeE,OAAf,GAAyBF,OAAO,CAACE,OAAjC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = doStringChecks;\n\nvar _SimpleSchema = require(\"../../SimpleSchema\");\n\nfunction doStringChecks(def, keyValue) {\n  // Is it a String?\n  if (typeof keyValue !== 'string') {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: 'String'\n    };\n  } // Is the string too long?\n\n\n  if (def.max !== null && def.max < keyValue.length) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.MAX_STRING,\n      max: def.max\n    };\n  } // Is the string too short?\n\n\n  if (def.min !== null && def.min > keyValue.length) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.MIN_STRING,\n      min: def.min\n    };\n  } // Does the string match the regular expression?\n\n\n  if (def.regEx instanceof RegExp && !def.regEx.test(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.FAILED_REGULAR_EXPRESSION,\n      regExp: def.regEx.toString()\n    };\n  } // If regEx is an array of regular expressions, does the string match all of them?\n\n\n  if (Array.isArray(def.regEx)) {\n    var regExError;\n    def.regEx.every(function (re) {\n      if (!re.test(keyValue)) {\n        regExError = {\n          type: _SimpleSchema.SimpleSchema.ErrorTypes.FAILED_REGULAR_EXPRESSION,\n          regExp: re.toString()\n        };\n        return false;\n      }\n\n      return true;\n    });\n    if (regExError) return regExError;\n  }\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}