{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = doNumberChecks;\n\nvar _SimpleSchema = require(\"../../SimpleSchema\"); // Polyfill to support IE11\n\n\nNumber.isInteger = Number.isInteger || function isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nfunction doNumberChecks(def, keyValue, op, expectsInteger) {\n  // Is it a valid number?\n  if (typeof keyValue !== 'number' || isNaN(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: expectsInteger ? 'Integer' : 'Number'\n    };\n  } // Assuming we are not incrementing, is the value less than the maximum value?\n\n\n  if (op !== '$inc' && def.max !== null && (def.exclusiveMax ? def.max <= keyValue : def.max < keyValue)) {\n    return {\n      type: def.exclusiveMax ? _SimpleSchema.SimpleSchema.ErrorTypes.MAX_NUMBER_EXCLUSIVE : _SimpleSchema.SimpleSchema.ErrorTypes.MAX_NUMBER,\n      max: def.max\n    };\n  } // Assuming we are not incrementing, is the value more than the minimum value?\n\n\n  if (op !== '$inc' && def.min !== null && (def.exclusiveMin ? def.min >= keyValue : def.min > keyValue)) {\n    return {\n      type: def.exclusiveMin ? _SimpleSchema.SimpleSchema.ErrorTypes.MIN_NUMBER_EXCLUSIVE : _SimpleSchema.SimpleSchema.ErrorTypes.MIN_NUMBER,\n      min: def.min\n    };\n  } // Is it an integer if we expect an integer?\n\n\n  if (expectsInteger && !Number.isInteger(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.MUST_BE_INTEGER\n    };\n  }\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/react-amplify/node_modules/simpl-schema/dist/validation/typeValidator/doNumberChecks.js"],"names":["Object","defineProperty","exports","value","default","doNumberChecks","_SimpleSchema","require","Number","isInteger","isFinite","Math","floor","def","keyValue","op","expectsInteger","isNaN","type","SimpleSchema","ErrorTypes","EXPECTED_TYPE","dataType","max","exclusiveMax","MAX_NUMBER_EXCLUSIVE","MAX_NUMBER","min","exclusiveMin","MIN_NUMBER_EXCLUSIVE","MIN_NUMBER","MUST_BE_INTEGER","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,oBAAD,CAA3B,C,CAEA;;;AACAC,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,IAAoB,SAASA,SAAT,CAAmBN,KAAnB,EAA0B;AAC/D,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BO,QAAQ,CAACP,KAAD,CAArC,IAAgDQ,IAAI,CAACC,KAAL,CAAWT,KAAX,MAAsBA,KAA7E;AACD,CAFD;;AAIA,SAASE,cAAT,CAAwBQ,GAAxB,EAA6BC,QAA7B,EAAuCC,EAAvC,EAA2CC,cAA3C,EAA2D;AACzD;AACA,MAAI,OAAOF,QAAP,KAAoB,QAApB,IAAgCG,KAAK,CAACH,QAAD,CAAzC,EAAqD;AACnD,WAAO;AACLI,MAAAA,IAAI,EAAEZ,aAAa,CAACa,YAAd,CAA2BC,UAA3B,CAAsCC,aADvC;AAELC,MAAAA,QAAQ,EAAEN,cAAc,GAAG,SAAH,GAAe;AAFlC,KAAP;AAID,GAPwD,CAOvD;;;AAGF,MAAID,EAAE,KAAK,MAAP,IAAiBF,GAAG,CAACU,GAAJ,KAAY,IAA7B,KAAsCV,GAAG,CAACW,YAAJ,GAAmBX,GAAG,CAACU,GAAJ,IAAWT,QAA9B,GAAyCD,GAAG,CAACU,GAAJ,GAAUT,QAAzF,CAAJ,EAAwG;AACtG,WAAO;AACLI,MAAAA,IAAI,EAAEL,GAAG,CAACW,YAAJ,GAAmBlB,aAAa,CAACa,YAAd,CAA2BC,UAA3B,CAAsCK,oBAAzD,GAAgFnB,aAAa,CAACa,YAAd,CAA2BC,UAA3B,CAAsCM,UADvH;AAELH,MAAAA,GAAG,EAAEV,GAAG,CAACU;AAFJ,KAAP;AAID,GAfwD,CAevD;;;AAGF,MAAIR,EAAE,KAAK,MAAP,IAAiBF,GAAG,CAACc,GAAJ,KAAY,IAA7B,KAAsCd,GAAG,CAACe,YAAJ,GAAmBf,GAAG,CAACc,GAAJ,IAAWb,QAA9B,GAAyCD,GAAG,CAACc,GAAJ,GAAUb,QAAzF,CAAJ,EAAwG;AACtG,WAAO;AACLI,MAAAA,IAAI,EAAEL,GAAG,CAACe,YAAJ,GAAmBtB,aAAa,CAACa,YAAd,CAA2BC,UAA3B,CAAsCS,oBAAzD,GAAgFvB,aAAa,CAACa,YAAd,CAA2BC,UAA3B,CAAsCU,UADvH;AAELH,MAAAA,GAAG,EAAEd,GAAG,CAACc;AAFJ,KAAP;AAID,GAvBwD,CAuBvD;;;AAGF,MAAIX,cAAc,IAAI,CAACR,MAAM,CAACC,SAAP,CAAiBK,QAAjB,CAAvB,EAAmD;AACjD,WAAO;AACLI,MAAAA,IAAI,EAAEZ,aAAa,CAACa,YAAd,CAA2BC,UAA3B,CAAsCW;AADvC,KAAP;AAGD;AACF;;AAEDC,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAACE,OAAzB;AACA4B,MAAM,CAAC9B,OAAP,CAAeE,OAAf,GAAyBF,OAAO,CAACE,OAAjC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = doNumberChecks;\n\nvar _SimpleSchema = require(\"../../SimpleSchema\");\n\n// Polyfill to support IE11\nNumber.isInteger = Number.isInteger || function isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nfunction doNumberChecks(def, keyValue, op, expectsInteger) {\n  // Is it a valid number?\n  if (typeof keyValue !== 'number' || isNaN(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.EXPECTED_TYPE,\n      dataType: expectsInteger ? 'Integer' : 'Number'\n    };\n  } // Assuming we are not incrementing, is the value less than the maximum value?\n\n\n  if (op !== '$inc' && def.max !== null && (def.exclusiveMax ? def.max <= keyValue : def.max < keyValue)) {\n    return {\n      type: def.exclusiveMax ? _SimpleSchema.SimpleSchema.ErrorTypes.MAX_NUMBER_EXCLUSIVE : _SimpleSchema.SimpleSchema.ErrorTypes.MAX_NUMBER,\n      max: def.max\n    };\n  } // Assuming we are not incrementing, is the value more than the minimum value?\n\n\n  if (op !== '$inc' && def.min !== null && (def.exclusiveMin ? def.min >= keyValue : def.min > keyValue)) {\n    return {\n      type: def.exclusiveMin ? _SimpleSchema.SimpleSchema.ErrorTypes.MIN_NUMBER_EXCLUSIVE : _SimpleSchema.SimpleSchema.ErrorTypes.MIN_NUMBER,\n      min: def.min\n    };\n  } // Is it an integer if we expect an integer?\n\n\n  if (expectsInteger && !Number.isInteger(keyValue)) {\n    return {\n      type: _SimpleSchema.SimpleSchema.ErrorTypes.MUST_BE_INTEGER\n    };\n  }\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}