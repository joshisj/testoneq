{"ast":null,"code":"import { createElement } from 'react';\nimport BaseField from './BaseField';\n\nconst identity = x => x;\n\nexport default function connectField(component, {\n  baseField = BaseField,\n  mapProps = identity,\n  ensureValue,\n  includeInChain,\n  includeParent,\n  initialValue\n} = {}) {\n  var _a;\n\n  return _a = class extends baseField {\n    constructor() {\n      // @ts-ignore\n      super(...arguments);\n      this.options.includeInChain = includeInChain === undefined ? true : includeInChain;\n      this.options.initialValue = initialValue === undefined ? true : initialValue;\n      if (ensureValue !== undefined) this.options.ensureValue = ensureValue;\n      if (includeParent !== undefined) this.options.includeParent = includeParent;\n    }\n\n    getChildContextName() {\n      return this.options.includeInChain ? super.getChildContextName() : this.context.uniforms.name;\n    }\n\n    componentWillMount() {\n      if (this.options.initialValue) {\n        const props = this.getFieldProps(undefined, {\n          ensureValue: false,\n          explicitInitialValue: true,\n          includeParent: false\n        }); // https://github.com/vazco/uniforms/issues/52\n        // If field is initially rendered with value, we treat it as an initial value.\n\n        if (this.props.value !== undefined && this.props.value !== props.value) {\n          props.onChange(this.props.value);\n          return;\n        }\n\n        if (props.required && props.initialValue !== undefined && props.value === undefined) {\n          props.onChange(props.initialValue);\n        }\n      }\n    }\n\n    render() {\n      return createElement(component, mapProps(this.getFieldProps()));\n    }\n\n  }, _a.displayName = `${component.displayName || component.name}${baseField.displayName || baseField.name}`, _a;\n}","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/node_modules/uniforms/es6/connectField.js"],"names":["createElement","BaseField","identity","x","connectField","component","baseField","mapProps","ensureValue","includeInChain","includeParent","initialValue","_a","constructor","arguments","options","undefined","getChildContextName","context","uniforms","name","componentWillMount","props","getFieldProps","explicitInitialValue","value","onChange","required","render","displayName"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AACA,MAAMC,QAAQ,GAAIC,CAAD,IAAOA,CAAxB;;AACA,eAAe,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAAEC,EAAAA,SAAS,GAAGL,SAAd;AAAyBM,EAAAA,QAAQ,GAAGL,QAApC;AAA8CM,EAAAA,WAA9C;AAA2DC,EAAAA,cAA3D;AAA2EC,EAAAA,aAA3E;AAA0FC,EAAAA;AAA1F,IAA4G,EAA7I,EAAiJ;AAC5J,MAAIC,EAAJ;;AACA,SAAOA,EAAE,GAAG,cAAcN,SAAd,CAAwB;AAC5BO,IAAAA,WAAW,GAAG;AACV;AACA,YAAM,GAAGC,SAAT;AACA,WAAKC,OAAL,CAAaN,cAAb,GACIA,cAAc,KAAKO,SAAnB,GAA+B,IAA/B,GAAsCP,cAD1C;AAEA,WAAKM,OAAL,CAAaJ,YAAb,GACIA,YAAY,KAAKK,SAAjB,GAA6B,IAA7B,GAAoCL,YADxC;AAEA,UAAIH,WAAW,KAAKQ,SAApB,EACI,KAAKD,OAAL,CAAaP,WAAb,GAA2BA,WAA3B;AACJ,UAAIE,aAAa,KAAKM,SAAtB,EACI,KAAKD,OAAL,CAAaL,aAAb,GAA6BA,aAA7B;AACP;;AACDO,IAAAA,mBAAmB,GAAG;AAClB,aAAO,KAAKF,OAAL,CAAaN,cAAb,GACD,MAAMQ,mBAAN,EADC,GAED,KAAKC,OAAL,CAAaC,QAAb,CAAsBC,IAF5B;AAGH;;AACDC,IAAAA,kBAAkB,GAAG;AACjB,UAAI,KAAKN,OAAL,CAAaJ,YAAjB,EAA+B;AAC3B,cAAMW,KAAK,GAAG,KAAKC,aAAL,CAAmBP,SAAnB,EAA8B;AACxCR,UAAAA,WAAW,EAAE,KAD2B;AAExCgB,UAAAA,oBAAoB,EAAE,IAFkB;AAGxCd,UAAAA,aAAa,EAAE;AAHyB,SAA9B,CAAd,CAD2B,CAM3B;AACA;;AACA,YAAI,KAAKY,KAAL,CAAWG,KAAX,KAAqBT,SAArB,IACA,KAAKM,KAAL,CAAWG,KAAX,KAAqBH,KAAK,CAACG,KAD/B,EACsC;AAClCH,UAAAA,KAAK,CAACI,QAAN,CAAe,KAAKJ,KAAL,CAAWG,KAA1B;AACA;AACH;;AACD,YAAIH,KAAK,CAACK,QAAN,IACAL,KAAK,CAACX,YAAN,KAAuBK,SADvB,IAEAM,KAAK,CAACG,KAAN,KAAgBT,SAFpB,EAE+B;AAC3BM,UAAAA,KAAK,CAACI,QAAN,CAAeJ,KAAK,CAACX,YAArB;AACH;AACJ;AACJ;;AACDiB,IAAAA,MAAM,GAAG;AACL,aAAO5B,aAAa,CAACK,SAAD,EAAYE,QAAQ,CAAC,KAAKgB,aAAL,EAAD,CAApB,CAApB;AACH;;AAzC2B,GAA7B,EA2CHX,EAAE,CAACiB,WAAH,GAAkB,GAAExB,SAAS,CAACwB,WAAV,IAChBxB,SAAS,CAACe,IAAK,GAAEd,SAAS,CAACuB,WAAV,IAAyBvB,SAAS,CAACc,IAAK,EA5C1D,EA6CHR,EA7CJ;AA8CH","sourcesContent":["import { createElement } from 'react';\nimport BaseField from './BaseField';\nconst identity = (x) => x;\nexport default function connectField(component, { baseField = BaseField, mapProps = identity, ensureValue, includeInChain, includeParent, initialValue, } = {}) {\n    var _a;\n    return _a = class extends baseField {\n            constructor() {\n                // @ts-ignore\n                super(...arguments);\n                this.options.includeInChain =\n                    includeInChain === undefined ? true : includeInChain;\n                this.options.initialValue =\n                    initialValue === undefined ? true : initialValue;\n                if (ensureValue !== undefined)\n                    this.options.ensureValue = ensureValue;\n                if (includeParent !== undefined)\n                    this.options.includeParent = includeParent;\n            }\n            getChildContextName() {\n                return this.options.includeInChain\n                    ? super.getChildContextName()\n                    : this.context.uniforms.name;\n            }\n            componentWillMount() {\n                if (this.options.initialValue) {\n                    const props = this.getFieldProps(undefined, {\n                        ensureValue: false,\n                        explicitInitialValue: true,\n                        includeParent: false,\n                    });\n                    // https://github.com/vazco/uniforms/issues/52\n                    // If field is initially rendered with value, we treat it as an initial value.\n                    if (this.props.value !== undefined &&\n                        this.props.value !== props.value) {\n                        props.onChange(this.props.value);\n                        return;\n                    }\n                    if (props.required &&\n                        props.initialValue !== undefined &&\n                        props.value === undefined) {\n                        props.onChange(props.initialValue);\n                    }\n                }\n            }\n            render() {\n                return createElement(component, mapProps(this.getFieldProps()));\n            }\n        },\n        _a.displayName = `${component.displayName ||\n            component.name}${baseField.displayName || baseField.name}`,\n        _a;\n}\n"]},"metadata":{},"sourceType":"module"}