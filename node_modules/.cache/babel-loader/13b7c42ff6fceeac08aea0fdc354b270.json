{"ast":null,"code":"import { __rest } from \"tslib\";\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport invariant from 'invariant';\nimport isEqual from 'lodash/isEqual';\nimport { Component } from 'react';\nimport BaseForm from './BaseForm';\nimport joinName from './joinName'; // Used for calculating labels and placeholders.\n\nconst flowingProp = (prop, schema, state, fallback) => {\n  const propDisabled = prop === '' || prop === false;\n  const propSet = prop !== undefined;\n  const schemaDisabled = schema === '' || schema === false;\n  const schemaValue = schema === true || schema === undefined ? fallback : schema;\n  const stateDisabled = !state;\n  const value = propDisabled || !propSet && (schemaDisabled || stateDisabled) ? '' : propSet ? prop === true ? schemaDisabled ? '' : schemaValue : prop : schemaValue;\n  return [value, schemaValue];\n};\n\nexport default class BaseField extends Component {\n  constructor() {\n    // @ts-ignore\n    super(...arguments);\n    invariant(this.context.uniforms, '<%s /> must be rendered within a form.', // @ts-ignore\n    this.constructor.displayName);\n    this.options = {\n      ensureValue: true,\n      explicitInitialValue: false,\n      includeParent: false,\n      overrideValue: false\n    };\n    this.randomId = this.context.uniforms.randomId();\n    this.findValue = this.findValue.bind(this);\n    this.findField = this.findField.bind(this);\n    this.findError = this.findError.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      uniforms: {\n        name: this.getChildContextName(),\n        error: this.getChildContextError(),\n        model: this.getChildContextModel(),\n        state: this.getChildContextState(),\n        schema: this.getChildContextSchema(),\n        onChange: this.getChildContextOnChange(),\n        onSubmit: this.getChildContextOnSubmit(),\n        randomId: this.context.uniforms.randomId\n      }\n    };\n  } // eslint-disable-next-line complexity\n\n\n  shouldComponentUpdate(nextProps, _, {\n    uniforms: nextContext\n  }) {\n    const prevProps = this.props;\n    const prevContext = this.context.uniforms;\n\n    if (!isEqual(prevProps, nextProps)) {\n      return true;\n    }\n\n    const _a = nextContext.state,\n          {\n      changedMap: nextMap\n    } = _a,\n          nextState = __rest(_a, [\"changedMap\"]);\n\n    const _b = prevContext.state,\n          {\n      changedMap: prevMap\n    } = _b,\n          prevState = __rest(_b, [\"changedMap\"]);\n\n    if (!isEqual(prevState, nextState)) {\n      return true;\n    }\n\n    const prevName = joinName(prevContext.name, prevProps.name);\n    const nextName = joinName(nextContext.name, nextProps.name);\n\n    if (prevName !== nextName) {\n      return true;\n    }\n\n    if (!isEqual(get(prevMap, prevName), get(nextMap, nextName))) {\n      return true;\n    } // Fields which are using parent props, need to be updated when parent value change\n\n\n    if (this.options.includeParent && nextName.includes('.')) {\n      const prevParentValue = get(prevContext.model, prevName.replace(/(.+)\\..+$/, '$1'));\n      const nextParentValue = get(nextContext.model, nextName.replace(/(.+)\\..+$/, '$1'));\n\n      if (!isEqual(prevParentValue, nextParentValue)) {\n        return true;\n      }\n    }\n\n    const prevValue = get(prevContext.model, prevName);\n    const nextValue = get(nextContext.model, nextName);\n\n    if (!isEqual(prevValue, nextValue)) {\n      return true;\n    }\n\n    if (prevContext.error !== nextContext.error) {\n      const prevError = prevContext.error && prevContext.schema.getError(prevName, prevContext.error);\n      const nextError = nextContext.error && nextContext.schema.getError(nextName, nextContext.error);\n\n      if (!isEqual(prevError, nextError)) {\n        return true;\n      } // Fields like List or Nest should update, whenever their children error has changed\n\n\n      if (nextValue === Object(nextValue) && !(nextValue instanceof Date)) {\n        return true;\n      }\n    }\n\n    if (nextContext.schema !== prevContext.schema) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getChildContextName() {\n    return joinName(null, this.context.uniforms.name, this.props.name);\n  }\n\n  getChildContextError() {\n    return this.context.uniforms.error;\n  }\n\n  getChildContextModel() {\n    return this.context.uniforms.model;\n  }\n\n  getChildContextState() {\n    const state = this.context.uniforms.state;\n    const props = this.props;\n\n    const propagate = name => props[name] === undefined || props[name] === null ? state[name] : !!props[name];\n\n    return Object.assign(Object.assign({}, state), {\n      label: propagate('label'),\n      disabled: propagate('disabled'),\n      placeholder: propagate('placeholder'),\n      showInlineError: propagate('showInlineError')\n    });\n  }\n\n  getChildContextSchema() {\n    return this.context.uniforms.schema;\n  }\n\n  getChildContextOnChange() {\n    return this.context.uniforms.onChange;\n  }\n\n  getChildContextOnSubmit() {\n    return this.context.uniforms.onSubmit;\n  } // eslint-disable-next-line complexity\n\n\n  getFieldProps(name, options) {\n    const context = this.context.uniforms;\n    const props = this.props;\n    const state = this.getChildContextState();\n    options = Object.assign({}, this.options, options);\n\n    if (name === undefined) {\n      name = joinName(context.name, props.name);\n    }\n\n    const changed = !!get(context.state.changedMap, name);\n    const error = context.schema.getError(name, context.error);\n    const errorMessage = context.schema.getErrorMessage(name, context.error);\n    const field = context.schema.getField(name);\n    const fieldType = context.schema.getType(name);\n    const fields = context.schema.getSubfields(name);\n    const schemaProps = context.schema.getProps(name, Object.assign(Object.assign({}, state), props));\n    const initialValue = options.explicitInitialValue ? context.schema.getInitialValue(name, props) : undefined;\n    const parent = options.includeParent && name.indexOf('.') !== -1 ? this.getFieldProps(name.replace(/(.+)\\..+$/, '$1'), {\n      includeParent: false\n    }) : null;\n    const [label, none] = flowingProp(props.label, schemaProps.label, state.label, '');\n    const [placeholder] = flowingProp(props.placeholder, schemaProps.placeholder, state.placeholder, label || none);\n    let value;\n\n    if (props.value === undefined || options.overrideValue) {\n      value = get(context.model, name);\n\n      if (value === undefined && !changed && !options.explicitInitialValue) {\n        value = context.schema.getInitialValue(name, props);\n      }\n    } // This prevents (un)controlled input change warning.\n    // More info: https://fb.me/react-controlled-components.\n\n\n    if (value === undefined && options.ensureValue) {\n      value = '';\n    }\n\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n      // 0. Constant props.\n      findError: this.findError,\n      findField: this.findField,\n      findValue: this.findValue,\n      id: this.randomId\n    }, state), {\n      // 2. Calculated field props.\n      changed,\n      error,\n      errorMessage,\n      field,\n      fieldType,\n      fields,\n      onChange: (value, key = name) => context.onChange(key, value),\n      parent,\n      value\n    }), options.explicitInitialValue && {\n      initialValue\n    }), schemaProps), props), (options.explicitInitialValue || options.overrideValue) && {\n      value\n    }), {\n      // 6. Calculated _special_ field props.\n      label,\n      name,\n      placeholder\n    });\n  }\n\n  findError(name) {\n    return this.context.uniforms.schema.getError(name, this.context.uniforms.error);\n  }\n\n  findField(name) {\n    return this.context.uniforms.schema.getField(name);\n  }\n\n  findValue(name) {\n    return get(this.context.uniforms.model, name);\n  }\n\n}\nBaseField.displayName = 'Field';\nBaseField.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.node]),\n  placeholder: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n};\nBaseField.contextTypes = BaseForm.childContextTypes;\nBaseField.childContextTypes = BaseForm.childContextTypes;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/node_modules/uniforms/es6/BaseField.js"],"names":["__rest","PropTypes","get","invariant","isEqual","Component","BaseForm","joinName","flowingProp","prop","schema","state","fallback","propDisabled","propSet","undefined","schemaDisabled","schemaValue","stateDisabled","value","BaseField","constructor","arguments","context","uniforms","displayName","options","ensureValue","explicitInitialValue","includeParent","overrideValue","randomId","findValue","bind","findField","findError","getChildContext","name","getChildContextName","error","getChildContextError","model","getChildContextModel","getChildContextState","getChildContextSchema","onChange","getChildContextOnChange","onSubmit","getChildContextOnSubmit","shouldComponentUpdate","nextProps","_","nextContext","prevProps","props","prevContext","_a","changedMap","nextMap","nextState","_b","prevMap","prevState","prevName","nextName","includes","prevParentValue","replace","nextParentValue","prevValue","nextValue","prevError","getError","nextError","Object","Date","propagate","assign","label","disabled","placeholder","showInlineError","getFieldProps","changed","errorMessage","getErrorMessage","field","getField","fieldType","getType","fields","getSubfields","schemaProps","getProps","initialValue","getInitialValue","parent","indexOf","none","id","key","propTypes","string","isRequired","bool","oneOfType","node","contextTypes","childContextTypes"],"mappings":"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","sourcesContent":["import { __rest } from \"tslib\";\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport invariant from 'invariant';\nimport isEqual from 'lodash/isEqual';\nimport { Component } from 'react';\nimport BaseForm from './BaseForm';\nimport joinName from './joinName';\n// Used for calculating labels and placeholders.\nconst flowingProp = (prop, schema, state, fallback) => {\n    const propDisabled = prop === '' || prop === false;\n    const propSet = prop !== undefined;\n    const schemaDisabled = schema === '' || schema === false;\n    const schemaValue = schema === true || schema === undefined ? fallback : schema;\n    const stateDisabled = !state;\n    const value = propDisabled || (!propSet && (schemaDisabled || stateDisabled))\n        ? ''\n        : propSet\n            ? prop === true\n                ? schemaDisabled\n                    ? ''\n                    : schemaValue\n                : prop\n            : schemaValue;\n    return [value, schemaValue];\n};\nexport default class BaseField extends Component {\n    constructor() {\n        // @ts-ignore\n        super(...arguments);\n        invariant(this.context.uniforms, '<%s /> must be rendered within a form.', \n        // @ts-ignore\n        this.constructor.displayName);\n        this.options = {\n            ensureValue: true,\n            explicitInitialValue: false,\n            includeParent: false,\n            overrideValue: false,\n        };\n        this.randomId = this.context.uniforms.randomId();\n        this.findValue = this.findValue.bind(this);\n        this.findField = this.findField.bind(this);\n        this.findError = this.findError.bind(this);\n    }\n    getChildContext() {\n        return {\n            uniforms: {\n                name: this.getChildContextName(),\n                error: this.getChildContextError(),\n                model: this.getChildContextModel(),\n                state: this.getChildContextState(),\n                schema: this.getChildContextSchema(),\n                onChange: this.getChildContextOnChange(),\n                onSubmit: this.getChildContextOnSubmit(),\n                randomId: this.context.uniforms.randomId,\n            },\n        };\n    }\n    // eslint-disable-next-line complexity\n    shouldComponentUpdate(nextProps, _, { uniforms: nextContext }) {\n        const prevProps = this.props;\n        const prevContext = this.context.uniforms;\n        if (!isEqual(prevProps, nextProps)) {\n            return true;\n        }\n        const _a = nextContext.state, { changedMap: nextMap } = _a, nextState = __rest(_a, [\"changedMap\"]);\n        const _b = prevContext.state, { changedMap: prevMap } = _b, prevState = __rest(_b, [\"changedMap\"]);\n        if (!isEqual(prevState, nextState)) {\n            return true;\n        }\n        const prevName = joinName(prevContext.name, prevProps.name);\n        const nextName = joinName(nextContext.name, nextProps.name);\n        if (prevName !== nextName) {\n            return true;\n        }\n        if (!isEqual(get(prevMap, prevName), get(nextMap, nextName))) {\n            return true;\n        }\n        // Fields which are using parent props, need to be updated when parent value change\n        if (this.options.includeParent && nextName.includes('.')) {\n            const prevParentValue = get(prevContext.model, prevName.replace(/(.+)\\..+$/, '$1'));\n            const nextParentValue = get(nextContext.model, nextName.replace(/(.+)\\..+$/, '$1'));\n            if (!isEqual(prevParentValue, nextParentValue)) {\n                return true;\n            }\n        }\n        const prevValue = get(prevContext.model, prevName);\n        const nextValue = get(nextContext.model, nextName);\n        if (!isEqual(prevValue, nextValue)) {\n            return true;\n        }\n        if (prevContext.error !== nextContext.error) {\n            const prevError = prevContext.error &&\n                prevContext.schema.getError(prevName, prevContext.error);\n            const nextError = nextContext.error &&\n                nextContext.schema.getError(nextName, nextContext.error);\n            if (!isEqual(prevError, nextError)) {\n                return true;\n            }\n            // Fields like List or Nest should update, whenever their children error has changed\n            if (nextValue === Object(nextValue) && !(nextValue instanceof Date)) {\n                return true;\n            }\n        }\n        if (nextContext.schema !== prevContext.schema) {\n            return true;\n        }\n        return false;\n    }\n    getChildContextName() {\n        return joinName(null, this.context.uniforms.name, this.props.name);\n    }\n    getChildContextError() {\n        return this.context.uniforms.error;\n    }\n    getChildContextModel() {\n        return this.context.uniforms.model;\n    }\n    getChildContextState() {\n        const state = this.context.uniforms.state;\n        const props = this.props;\n        const propagate = (name) => props[name] === undefined || props[name] === null\n            ? state[name]\n            : !!props[name];\n        return Object.assign(Object.assign({}, state), { label: propagate('label'), disabled: propagate('disabled'), placeholder: propagate('placeholder'), showInlineError: propagate('showInlineError') });\n    }\n    getChildContextSchema() {\n        return this.context.uniforms.schema;\n    }\n    getChildContextOnChange() {\n        return this.context.uniforms.onChange;\n    }\n    getChildContextOnSubmit() {\n        return this.context.uniforms.onSubmit;\n    }\n    // eslint-disable-next-line complexity\n    getFieldProps(name, options) {\n        const context = this.context.uniforms;\n        const props = this.props;\n        const state = this.getChildContextState();\n        options = Object.assign({}, this.options, options);\n        if (name === undefined) {\n            name = joinName(context.name, props.name);\n        }\n        const changed = !!get(context.state.changedMap, name);\n        const error = context.schema.getError(name, context.error);\n        const errorMessage = context.schema.getErrorMessage(name, context.error);\n        const field = context.schema.getField(name);\n        const fieldType = context.schema.getType(name);\n        const fields = context.schema.getSubfields(name);\n        const schemaProps = context.schema.getProps(name, Object.assign(Object.assign({}, state), props));\n        const initialValue = options.explicitInitialValue\n            ? context.schema.getInitialValue(name, props)\n            : undefined;\n        const parent = options.includeParent && name.indexOf('.') !== -1\n            ? this.getFieldProps(name.replace(/(.+)\\..+$/, '$1'), {\n                includeParent: false,\n            })\n            : null;\n        const [label, none] = flowingProp(props.label, schemaProps.label, state.label, '');\n        const [placeholder] = flowingProp(props.placeholder, schemaProps.placeholder, state.placeholder, label || none);\n        let value;\n        if (props.value === undefined || options.overrideValue) {\n            value = get(context.model, name);\n            if (value === undefined && !changed && !options.explicitInitialValue) {\n                value = context.schema.getInitialValue(name, props);\n            }\n        }\n        // This prevents (un)controlled input change warning.\n        // More info: https://fb.me/react-controlled-components.\n        if (value === undefined && options.ensureValue) {\n            value = '';\n        }\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ \n            // 0. Constant props.\n            findError: this.findError, findField: this.findField, findValue: this.findValue, id: this.randomId }, state), { \n            // 2. Calculated field props.\n            changed,\n            error,\n            errorMessage,\n            field,\n            fieldType,\n            fields, onChange: (value, key = name) => context.onChange(key, value), parent,\n            value }), (options.explicitInitialValue && { initialValue })), schemaProps), props), ((options.explicitInitialValue || options.overrideValue) && { value })), { \n            // 6. Calculated _special_ field props.\n            label,\n            name,\n            placeholder });\n    }\n    findError(name) {\n        return this.context.uniforms.schema.getError(name, this.context.uniforms.error);\n    }\n    findField(name) {\n        return this.context.uniforms.schema.getField(name);\n    }\n    findValue(name) {\n        return get(this.context.uniforms.model, name);\n    }\n}\nBaseField.displayName = 'Field';\nBaseField.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    label: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.string,\n        PropTypes.node,\n    ]),\n    placeholder: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\nBaseField.contextTypes = BaseForm.childContextTypes;\nBaseField.childContextTypes = BaseForm.childContextTypes;\n"]},"metadata":{},"sourceType":"module"}