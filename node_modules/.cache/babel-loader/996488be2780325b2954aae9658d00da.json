{"ast":null,"code":"import { __rest } from \"tslib\";\nimport SimpleSchema from 'simpl-schema';\nimport cloneDeep from 'lodash/cloneDeep';\nimport invariant from 'invariant';\nimport { Bridge, joinName } from 'uniforms';\nexport default class SimpleSchema2Bridge extends Bridge {\n  constructor(schema) {\n    super();\n    this.schema = schema;\n  }\n\n  static check(schema) {\n    return schema && schema.getDefinition && schema.messageBox && schema.objectKeys && schema.validator && schema.version === 2;\n  }\n\n  getError(name, error) {\n    return error && error.details && error.details.find && error.details.find(error => error.name === name) || null;\n  }\n\n  getErrorMessage(name, error) {\n    const scopedError = this.getError(name, error);\n    return !scopedError ? '' : this.schema.messageForError(scopedError);\n  }\n\n  getErrorMessages(error) {\n    if (error) {\n      if (Array.isArray(error.details)) {\n        return error.details.map(error => this.schema.messageForError(error));\n      }\n\n      if (error.message) {\n        return [error.message];\n      }\n    }\n\n    if (error !== undefined) {\n      return [error];\n    }\n\n    return [];\n  }\n\n  getField(name) {\n    const definition = this.schema.getDefinition(name);\n    invariant(definition, 'Field not found in schema: \"%s\"', name);\n    const merged = Object.assign(Object.assign({}, definition), definition.type[0]); // aldeed/node-simple-schema#27\n\n    if (merged.autoValue && (merged.autoValue.name === 'defaultAutoValueFunction' || merged.autoValue.toString().indexOf('$setOnInsert:') !== -1) // FIXME: Hack.\n    ) {\n        try {\n          merged.defaultValue = merged.autoValue.call({\n            operator: null\n          });\n        } catch (_) {\n          /* ignore it */\n        }\n      }\n\n    return merged;\n  }\n\n  getInitialValue(name, props = {}) {\n    const field = this.getField(name);\n\n    if (field.type === Array) {\n      const item = this.getInitialValue(joinName(name, '0'));\n      const items = Math.max(props.initialCount || 0, field.minCount || 0);\n      return Array.from({\n        length: items\n      }, () => item);\n    }\n\n    if (field.type === Object || SimpleSchema2Bridge.check(field.type)) {\n      return {};\n    }\n\n    return field.defaultValue;\n  } // eslint-disable-next-line complexity\n\n\n  getProps(name, props = {}) {\n    // Type should be omitted.\n    // eslint-disable-next-line no-unused-vars, prefer-const\n    let _a = this.getField(name),\n        {\n      optional,\n      type,\n      uniforms\n    } = _a,\n        field = __rest(_a, [\"optional\", \"type\", \"uniforms\"]);\n\n    field = Object.assign(Object.assign({}, field), {\n      required: !optional\n    });\n\n    if (uniforms) {\n      if (typeof uniforms === 'string' || typeof uniforms === 'function') {\n        field = Object.assign(Object.assign({}, field), {\n          component: uniforms\n        });\n      } else {\n        field = Object.assign(Object.assign({}, field), uniforms);\n      }\n    }\n\n    if (type === Array) {\n      try {\n        const itemProps = this.getProps(`${name}.$`, props);\n\n        if (itemProps.allowedValues && !props.allowedValues) {\n          field.allowedValues = itemProps.allowedValues;\n        }\n\n        if (itemProps.transform && !props.transform) {\n          field.transform = itemProps.transform;\n        }\n      } catch (_) {\n        /* ignore it */\n      }\n    } else if (type === Number) {\n      field = Object.assign(Object.assign({}, field), {\n        decimal: true\n      });\n    }\n\n    let options = props.options || field.options;\n\n    if (options) {\n      if (typeof options === 'function') {\n        options = options();\n      }\n\n      if (!Array.isArray(options)) {\n        field = Object.assign(Object.assign({}, field), {\n          transform: value => options[value],\n          allowedValues: Object.keys(options)\n        });\n      } else {\n        field = Object.assign(Object.assign({}, field), {\n          transform: value => options.find(option => option.value === value).label,\n          allowedValues: options.map(option => option.value)\n        });\n      }\n    }\n\n    return field;\n  }\n\n  getSubfields(name) {\n    return this.schema.objectKeys(SimpleSchema._makeGeneric(name));\n  }\n\n  getType(name) {\n    const type = this.getField(name).type;\n\n    if (type === SimpleSchema.Integer) {\n      return Number;\n    }\n\n    if (SimpleSchema2Bridge.check(type)) {\n      return Object;\n    }\n\n    return type;\n  }\n\n  getValidator(options = {\n    clean: true,\n    mutate: true\n  }) {\n    const validator = this.schema.validator(options); // Clean mutate its argument, even if mutate is false.\n\n    if (options.clean) {\n      return model => validator(cloneDeep(Object.assign({}, model)));\n    }\n\n    return validator;\n  }\n\n}","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/secondary/node_modules/uniforms-bridge-simple-schema-2/es6/SimpleSchema2Bridge.js"],"names":["__rest","SimpleSchema","cloneDeep","invariant","Bridge","joinName","SimpleSchema2Bridge","constructor","schema","check","getDefinition","messageBox","objectKeys","validator","version","getError","name","error","details","find","getErrorMessage","scopedError","messageForError","getErrorMessages","Array","isArray","map","message","undefined","getField","definition","merged","Object","assign","type","autoValue","toString","indexOf","defaultValue","call","operator","_","getInitialValue","props","field","item","items","Math","max","initialCount","minCount","from","length","getProps","_a","optional","uniforms","required","component","itemProps","allowedValues","transform","Number","decimal","options","value","keys","option","label","getSubfields","_makeGeneric","getType","Integer","getValidator","clean","mutate","model"],"mappings":"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","sourcesContent":["import { __rest } from \"tslib\";\nimport SimpleSchema from 'simpl-schema';\nimport cloneDeep from 'lodash/cloneDeep';\nimport invariant from 'invariant';\nimport { Bridge, joinName } from 'uniforms';\nexport default class SimpleSchema2Bridge extends Bridge {\n    constructor(schema) {\n        super();\n        this.schema = schema;\n    }\n    static check(schema) {\n        return (schema &&\n            schema.getDefinition &&\n            schema.messageBox &&\n            schema.objectKeys &&\n            schema.validator &&\n            schema.version === 2);\n    }\n    getError(name, error) {\n        return ((error &&\n            error.details &&\n            error.details.find &&\n            error.details.find(error => error.name === name)) ||\n            null);\n    }\n    getErrorMessage(name, error) {\n        const scopedError = this.getError(name, error);\n        return !scopedError ? '' : this.schema.messageForError(scopedError);\n    }\n    getErrorMessages(error) {\n        if (error) {\n            if (Array.isArray(error.details)) {\n                return error.details.map(error => this.schema.messageForError(error));\n            }\n            if (error.message) {\n                return [error.message];\n            }\n        }\n        if (error !== undefined) {\n            return [error];\n        }\n        return [];\n    }\n    getField(name) {\n        const definition = this.schema.getDefinition(name);\n        invariant(definition, 'Field not found in schema: \"%s\"', name);\n        const merged = Object.assign(Object.assign({}, definition), definition.type[0]);\n        // aldeed/node-simple-schema#27\n        if (merged.autoValue &&\n            (merged.autoValue.name === 'defaultAutoValueFunction' ||\n                merged.autoValue.toString().indexOf('$setOnInsert:') !== -1) // FIXME: Hack.\n        ) {\n            try {\n                merged.defaultValue = merged.autoValue.call({ operator: null });\n            }\n            catch (_) {\n                /* ignore it */\n            }\n        }\n        return merged;\n    }\n    getInitialValue(name, props = {}) {\n        const field = this.getField(name);\n        if (field.type === Array) {\n            const item = this.getInitialValue(joinName(name, '0'));\n            const items = Math.max(props.initialCount || 0, field.minCount || 0);\n            return Array.from({ length: items }, () => item);\n        }\n        if (field.type === Object || SimpleSchema2Bridge.check(field.type)) {\n            return {};\n        }\n        return field.defaultValue;\n    }\n    // eslint-disable-next-line complexity\n    getProps(name, props = {}) {\n        // Type should be omitted.\n        // eslint-disable-next-line no-unused-vars, prefer-const\n        let _a = this.getField(name), { optional, type, uniforms } = _a, field = __rest(_a, [\"optional\", \"type\", \"uniforms\"]);\n        field = Object.assign(Object.assign({}, field), { required: !optional });\n        if (uniforms) {\n            if (typeof uniforms === 'string' || typeof uniforms === 'function') {\n                field = Object.assign(Object.assign({}, field), { component: uniforms });\n            }\n            else {\n                field = Object.assign(Object.assign({}, field), uniforms);\n            }\n        }\n        if (type === Array) {\n            try {\n                const itemProps = this.getProps(`${name}.$`, props);\n                if (itemProps.allowedValues && !props.allowedValues) {\n                    field.allowedValues = itemProps.allowedValues;\n                }\n                if (itemProps.transform && !props.transform) {\n                    field.transform = itemProps.transform;\n                }\n            }\n            catch (_) {\n                /* ignore it */\n            }\n        }\n        else if (type === Number) {\n            field = Object.assign(Object.assign({}, field), { decimal: true });\n        }\n        let options = props.options || field.options;\n        if (options) {\n            if (typeof options === 'function') {\n                options = options();\n            }\n            if (!Array.isArray(options)) {\n                field = Object.assign(Object.assign({}, field), { transform: value => options[value], allowedValues: Object.keys(options) });\n            }\n            else {\n                field = Object.assign(Object.assign({}, field), { transform: value => options.find(option => option.value === value).label, allowedValues: options.map(option => option.value) });\n            }\n        }\n        return field;\n    }\n    getSubfields(name) {\n        return this.schema.objectKeys(SimpleSchema._makeGeneric(name));\n    }\n    getType(name) {\n        const type = this.getField(name).type;\n        if (type === SimpleSchema.Integer) {\n            return Number;\n        }\n        if (SimpleSchema2Bridge.check(type)) {\n            return Object;\n        }\n        return type;\n    }\n    getValidator(options = { clean: true, mutate: true }) {\n        const validator = this.schema.validator(options);\n        // Clean mutate its argument, even if mutate is false.\n        if (options.clean) {\n            return model => validator(cloneDeep(Object.assign({}, model)));\n        }\n        return validator;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}