{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _clone = _interopRequireDefault(require(\"clone\"));\n\nvar _mongoObject = _interopRequireDefault(require(\"mongo-object\"));\n\nvar _utility = require(\"./utility\");\n\nvar _SimpleSchema = require(\"./SimpleSchema\");\n\nvar _convertToProperType = _interopRequireDefault(require(\"./clean/convertToProperType\"));\n\nvar _setAutoValues = _interopRequireDefault(require(\"./clean/setAutoValues\"));\n\nvar _typeValidator = _interopRequireDefault(require(\"./validation/typeValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * @param {SimpleSchema} ss - A SimpleSchema instance\n * @param {Object} doc - Document or modifier to clean. Referenced object will be modified in place.\n * @param {Object} [options]\n * @param {Boolean} [options.mutate=false] - Mutate doc. Set this to true to improve performance if you don't mind mutating the object you're cleaning.\n * @param {Boolean} [options.filter=true] - Do filtering?\n * @param {Boolean} [options.autoConvert=true] - Do automatic type converting?\n * @param {Boolean} [options.removeEmptyStrings=true] - Remove keys in normal object or $set where the value is an empty string?\n * @param {Boolean} [options.removeNullsFromArrays=false] - Remove all null items from all arrays\n * @param {Boolean} [options.trimStrings=true] - Trim string values?\n * @param {Boolean} [options.getAutoValues=true] - Inject automatic and default values?\n * @param {Boolean} [options.isModifier=false] - Is doc a modifier object?\n * @param {Boolean} [options.isUpsert=false] - Will the modifier object be used to do an upsert? This is used\n *   to determine whether $setOnInsert should be added to it for defaultValues.\n * @param {Boolean} [options.mongoObject] - If you already have the mongoObject instance, pass it to improve performance\n * @param {Object} [options.extendAutoValueContext] - This object will be added to the `this` context of autoValue functions.\n * @returns {Object} The modified doc.\n *\n * Cleans a document or modifier object. By default, will filter, automatically\n * type convert where possible, and inject automatic/default values. Use the options\n * to skip one or more of these.\n */\n\n\nfunction clean(ss, doc) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // By default, doc will be filtered and autoconverted\n\n  options = _objectSpread({\n    isModifier: (0, _utility.looksLikeModifier)(doc),\n    isUpsert: false\n  }, ss._cleanOptions, {}, options); // Clone so we do not mutate\n\n  var cleanDoc = options.mutate ? doc : (0, _clone.default)(doc);\n  var mongoObject = options.mongoObject || new _mongoObject.default(cleanDoc, ss.blackboxKeys()); // Clean loop\n\n  if (options.filter || options.autoConvert || options.removeEmptyStrings || options.trimStrings) {\n    var removedPositions = []; // For removing now-empty objects after\n\n    mongoObject.forEachNode(function eachNode() {\n      // The value of a $unset is irrelevant, so no point in cleaning it.\n      // Also we do not care if fields not in the schema are unset.\n      if (this.operator === '$unset') return;\n      var gKey = this.genericKey;\n      if (!gKey) return;\n      var val = this.value;\n      if (val === undefined) return;\n      var p; // Filter out props if necessary\n\n      if (options.filter && !ss.allowsKey(gKey) || options.removeNullsFromArrays && this.isArrayItem && val === null) {\n        // XXX Special handling for $each; maybe this could be made nicer\n        if (this.position.slice(-7) === '[$each]') {\n          mongoObject.removeValueForPosition(this.position.slice(0, -7));\n          removedPositions.push(this.position.slice(0, -7));\n        } else {\n          this.remove();\n          removedPositions.push(this.position);\n        }\n\n        if (_SimpleSchema.SimpleSchema.debug) {\n          console.info(\"SimpleSchema.clean: filtered out value that would have affected key \\\"\".concat(gKey, \"\\\", which is not allowed by the schema\"));\n        }\n\n        return; // no reason to do more\n      }\n\n      var outerDef = ss.schema(gKey);\n      var defs = outerDef && outerDef.type.definitions;\n      var def = defs && defs[0]; // Autoconvert values if requested and if possible\n\n      if (options.autoConvert && def) {\n        var isValidType = defs.some(function (definition) {\n          var errors = _typeValidator.default.call({\n            valueShouldBeChecked: true,\n            definition: definition,\n            value: val\n          });\n\n          return errors === undefined;\n        });\n\n        if (!isValidType) {\n          var newVal = (0, _convertToProperType.default)(val, def.type);\n\n          if (newVal !== undefined && newVal !== val) {\n            _SimpleSchema.SimpleSchema.debug && console.info(\"SimpleSchema.clean: autoconverted value \".concat(val, \" from \").concat(_typeof(val), \" to \").concat(_typeof(newVal), \" for \").concat(gKey));\n            val = newVal;\n            this.updateValue(newVal);\n          }\n        }\n      } // Trim strings if\n      // 1. The trimStrings option is `true` AND\n      // 2. The field is not in the schema OR is in the schema with `trim` !== `false` AND\n      // 3. The value is a string.\n\n\n      if (options.trimStrings && (!def || def.trim !== false) && typeof val === 'string') {\n        val = val.trim();\n        this.updateValue(val);\n      } // Remove empty strings if\n      // 1. The removeEmptyStrings option is `true` AND\n      // 2. The value is in a normal object or in the $set part of a modifier\n      // 3. The value is an empty string.\n\n\n      if (options.removeEmptyStrings && (!this.operator || this.operator === '$set') && typeof val === 'string' && !val.length) {\n        // For a document, we remove any fields that are being set to an empty string\n        this.remove(); // For a modifier, we $unset any fields that are being set to an empty string.\n        // But only if we're not already within an entire object that is being set.\n\n        if (this.operator === '$set' && this.position.match(/\\[.+?\\]/g).length < 2) {\n          p = this.position.replace('$set', '$unset');\n          mongoObject.setValueForPosition(p, '');\n        }\n      }\n    }, {\n      endPointsOnly: false\n    }); // Remove any objects that are now empty after filtering\n\n    removedPositions.forEach(function (removedPosition) {\n      var lastBrace = removedPosition.lastIndexOf('[');\n\n      if (lastBrace !== -1) {\n        var removedPositionParent = removedPosition.slice(0, lastBrace);\n        var value = mongoObject.getValueForPosition(removedPositionParent);\n        if ((0, _utility.isEmptyObject)(value)) mongoObject.removeValueForPosition(removedPositionParent);\n      }\n    });\n    mongoObject.removeArrayItems();\n  } // Set automatic values\n\n\n  options.getAutoValues && (0, _setAutoValues.default)(ss.autoValueFunctions(), mongoObject, options.isModifier, options.isUpsert, options.extendAutoValueContext); // Ensure we don't have any operators set to an empty object\n  // since MongoDB 2.6+ will throw errors.\n\n  if (options.isModifier) {\n    Object.keys(cleanDoc || {}).forEach(function (op) {\n      var operatorValue = cleanDoc[op];\n\n      if (_typeof(operatorValue) === 'object' && operatorValue !== null && (0, _utility.isEmptyObject)(operatorValue)) {\n        delete cleanDoc[op];\n      }\n    });\n  }\n\n  return cleanDoc;\n}\n\nvar _default = clean;\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/node_modules/simpl-schema/dist/clean.js"],"names":["Object","defineProperty","exports","value","default","_clone","_interopRequireDefault","require","_mongoObject","_utility","_SimpleSchema","_convertToProperType","_setAutoValues","_typeValidator","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","clean","ss","doc","options","undefined","isModifier","looksLikeModifier","isUpsert","_cleanOptions","cleanDoc","mutate","mongoObject","blackboxKeys","autoConvert","removeEmptyStrings","trimStrings","removedPositions","forEachNode","eachNode","operator","gKey","genericKey","val","p","allowsKey","removeNullsFromArrays","isArrayItem","position","slice","removeValueForPosition","remove","SimpleSchema","debug","console","info","concat","outerDef","schema","defs","type","definitions","def","isValidType","some","definition","errors","call","valueShouldBeChecked","newVal","updateValue","trim","match","replace","setValueForPosition","endPointsOnly","removedPosition","lastBrace","lastIndexOf","removedPositionParent","getValueForPosition","isEmptyObject","removeArrayItems","getAutoValues","autoValueFunctions","extendAutoValueContext","op","operatorValue","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _clone = _interopRequireDefault(require(\"clone\"));\n\nvar _mongoObject = _interopRequireDefault(require(\"mongo-object\"));\n\nvar _utility = require(\"./utility\");\n\nvar _SimpleSchema = require(\"./SimpleSchema\");\n\nvar _convertToProperType = _interopRequireDefault(require(\"./clean/convertToProperType\"));\n\nvar _setAutoValues = _interopRequireDefault(require(\"./clean/setAutoValues\"));\n\nvar _typeValidator = _interopRequireDefault(require(\"./validation/typeValidator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @param {SimpleSchema} ss - A SimpleSchema instance\n * @param {Object} doc - Document or modifier to clean. Referenced object will be modified in place.\n * @param {Object} [options]\n * @param {Boolean} [options.mutate=false] - Mutate doc. Set this to true to improve performance if you don't mind mutating the object you're cleaning.\n * @param {Boolean} [options.filter=true] - Do filtering?\n * @param {Boolean} [options.autoConvert=true] - Do automatic type converting?\n * @param {Boolean} [options.removeEmptyStrings=true] - Remove keys in normal object or $set where the value is an empty string?\n * @param {Boolean} [options.removeNullsFromArrays=false] - Remove all null items from all arrays\n * @param {Boolean} [options.trimStrings=true] - Trim string values?\n * @param {Boolean} [options.getAutoValues=true] - Inject automatic and default values?\n * @param {Boolean} [options.isModifier=false] - Is doc a modifier object?\n * @param {Boolean} [options.isUpsert=false] - Will the modifier object be used to do an upsert? This is used\n *   to determine whether $setOnInsert should be added to it for defaultValues.\n * @param {Boolean} [options.mongoObject] - If you already have the mongoObject instance, pass it to improve performance\n * @param {Object} [options.extendAutoValueContext] - This object will be added to the `this` context of autoValue functions.\n * @returns {Object} The modified doc.\n *\n * Cleans a document or modifier object. By default, will filter, automatically\n * type convert where possible, and inject automatic/default values. Use the options\n * to skip one or more of these.\n */\nfunction clean(ss, doc) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // By default, doc will be filtered and autoconverted\n  options = _objectSpread({\n    isModifier: (0, _utility.looksLikeModifier)(doc),\n    isUpsert: false\n  }, ss._cleanOptions, {}, options); // Clone so we do not mutate\n\n  var cleanDoc = options.mutate ? doc : (0, _clone.default)(doc);\n  var mongoObject = options.mongoObject || new _mongoObject.default(cleanDoc, ss.blackboxKeys()); // Clean loop\n\n  if (options.filter || options.autoConvert || options.removeEmptyStrings || options.trimStrings) {\n    var removedPositions = []; // For removing now-empty objects after\n\n    mongoObject.forEachNode(function eachNode() {\n      // The value of a $unset is irrelevant, so no point in cleaning it.\n      // Also we do not care if fields not in the schema are unset.\n      if (this.operator === '$unset') return;\n      var gKey = this.genericKey;\n      if (!gKey) return;\n      var val = this.value;\n      if (val === undefined) return;\n      var p; // Filter out props if necessary\n\n      if (options.filter && !ss.allowsKey(gKey) || options.removeNullsFromArrays && this.isArrayItem && val === null) {\n        // XXX Special handling for $each; maybe this could be made nicer\n        if (this.position.slice(-7) === '[$each]') {\n          mongoObject.removeValueForPosition(this.position.slice(0, -7));\n          removedPositions.push(this.position.slice(0, -7));\n        } else {\n          this.remove();\n          removedPositions.push(this.position);\n        }\n\n        if (_SimpleSchema.SimpleSchema.debug) {\n          console.info(\"SimpleSchema.clean: filtered out value that would have affected key \\\"\".concat(gKey, \"\\\", which is not allowed by the schema\"));\n        }\n\n        return; // no reason to do more\n      }\n\n      var outerDef = ss.schema(gKey);\n      var defs = outerDef && outerDef.type.definitions;\n      var def = defs && defs[0]; // Autoconvert values if requested and if possible\n\n      if (options.autoConvert && def) {\n        var isValidType = defs.some(function (definition) {\n          var errors = _typeValidator.default.call({\n            valueShouldBeChecked: true,\n            definition: definition,\n            value: val\n          });\n\n          return errors === undefined;\n        });\n\n        if (!isValidType) {\n          var newVal = (0, _convertToProperType.default)(val, def.type);\n\n          if (newVal !== undefined && newVal !== val) {\n            _SimpleSchema.SimpleSchema.debug && console.info(\"SimpleSchema.clean: autoconverted value \".concat(val, \" from \").concat(_typeof(val), \" to \").concat(_typeof(newVal), \" for \").concat(gKey));\n            val = newVal;\n            this.updateValue(newVal);\n          }\n        }\n      } // Trim strings if\n      // 1. The trimStrings option is `true` AND\n      // 2. The field is not in the schema OR is in the schema with `trim` !== `false` AND\n      // 3. The value is a string.\n\n\n      if (options.trimStrings && (!def || def.trim !== false) && typeof val === 'string') {\n        val = val.trim();\n        this.updateValue(val);\n      } // Remove empty strings if\n      // 1. The removeEmptyStrings option is `true` AND\n      // 2. The value is in a normal object or in the $set part of a modifier\n      // 3. The value is an empty string.\n\n\n      if (options.removeEmptyStrings && (!this.operator || this.operator === '$set') && typeof val === 'string' && !val.length) {\n        // For a document, we remove any fields that are being set to an empty string\n        this.remove(); // For a modifier, we $unset any fields that are being set to an empty string.\n        // But only if we're not already within an entire object that is being set.\n\n        if (this.operator === '$set' && this.position.match(/\\[.+?\\]/g).length < 2) {\n          p = this.position.replace('$set', '$unset');\n          mongoObject.setValueForPosition(p, '');\n        }\n      }\n    }, {\n      endPointsOnly: false\n    }); // Remove any objects that are now empty after filtering\n\n    removedPositions.forEach(function (removedPosition) {\n      var lastBrace = removedPosition.lastIndexOf('[');\n\n      if (lastBrace !== -1) {\n        var removedPositionParent = removedPosition.slice(0, lastBrace);\n        var value = mongoObject.getValueForPosition(removedPositionParent);\n        if ((0, _utility.isEmptyObject)(value)) mongoObject.removeValueForPosition(removedPositionParent);\n      }\n    });\n    mongoObject.removeArrayItems();\n  } // Set automatic values\n\n\n  options.getAutoValues && (0, _setAutoValues.default)(ss.autoValueFunctions(), mongoObject, options.isModifier, options.isUpsert, options.extendAutoValueContext); // Ensure we don't have any operators set to an empty object\n  // since MongoDB 2.6+ will throw errors.\n\n  if (options.isModifier) {\n    Object.keys(cleanDoc || {}).forEach(function (op) {\n      var operatorValue = cleanDoc[op];\n\n      if (_typeof(operatorValue) === 'object' && operatorValue !== null && (0, _utility.isEmptyObject)(operatorValue)) {\n        delete cleanDoc[op];\n      }\n    });\n  }\n\n  return cleanDoc;\n}\n\nvar _default = clean;\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}