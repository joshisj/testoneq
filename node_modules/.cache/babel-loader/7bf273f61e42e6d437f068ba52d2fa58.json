{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPositionsForAutoValue;\n\nvar _mongoObject = _interopRequireDefault(require(\"mongo-object\"));\n\nvar _utility = require(\"../utility\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * A position is a place in the object where this field exists.\n * If no arrays are involved, then every field/key has at most 1 position.\n * If arrays are involved, then a field could have potentially unlimited positions.\n *\n * For example, the key 'a.b.$.c` would have these positions:\n *   `a[b][0][c]`\n *   `a[b][1][c]`\n *   `a[b][2][c]`\n *\n * For this object:\n * {\n *   a: {\n *     b: [\n *       { c: 1 },\n *       { c: 1 },\n *       { c: 1 },\n *     ],\n *   },\n * }\n *\n * To make matters more complicated, we want to include not only the existing positions\n * but also the positions that might exist due to their parent object existing or their\n * parent object being auto-created by a MongoDB modifier that implies it.\n */\n\n\nfunction getPositionsForAutoValue(_ref) {\n  var fieldName = _ref.fieldName,\n      isModifier = _ref.isModifier,\n      mongoObject = _ref.mongoObject; // Positions for this field\n\n  var positions = mongoObject.getPositionsInfoForGenericKey(fieldName); // If the field is an object and will be created by MongoDB,\n  // we don't need (and can't have) a value for it\n\n  if (isModifier && mongoObject.getPositionsThatCreateGenericKey(fieldName).length > 0) {\n    return positions;\n  } // For simple top-level fields, just add an undefined would-be position\n  // if there isn't a real position.\n\n\n  if (fieldName.indexOf('.') === -1 && positions.length === 0) {\n    positions.push({\n      key: fieldName,\n      value: undefined,\n      operator: isModifier ? '$set' : null,\n      position: isModifier ? \"$set[\".concat(fieldName, \"]\") : fieldName\n    });\n    return positions;\n  }\n\n  var parentPath = (0, _utility.getParentOfKey)(fieldName);\n  var lastPart = (0, _utility.getLastPartOfKey)(fieldName, parentPath);\n  var lastPartWithBraces = lastPart.replace(/\\./g, '][');\n  var parentPositions = mongoObject.getPositionsInfoForGenericKey(parentPath);\n\n  if (parentPositions.length) {\n    parentPositions.forEach(function (info) {\n      var childPosition = \"\".concat(info.position, \"[\").concat(lastPartWithBraces, \"]\");\n\n      if (!positions.find(function (i) {\n        return i.position === childPosition;\n      })) {\n        positions.push({\n          key: \"\".concat(info.key, \".\").concat(lastPart),\n          value: undefined,\n          operator: info.operator,\n          position: childPosition\n        });\n      }\n    });\n  } else if (parentPath.slice(-2) !== '.$') {\n    // positions that will create parentPath\n    mongoObject.getPositionsThatCreateGenericKey(parentPath).forEach(function (info) {\n      var operator = info.operator,\n          position = info.position;\n      var wouldBePosition;\n\n      if (operator) {\n        var next = position.slice(position.indexOf('[') + 1, position.indexOf(']'));\n        var nextPieces = next.split('.');\n        var newPieces = [];\n        var newKey;\n\n        while (nextPieces.length && newKey !== parentPath) {\n          newPieces.push(nextPieces.shift());\n          newKey = newPieces.join('.');\n        }\n\n        newKey = \"\".concat(newKey, \".\").concat(fieldName.slice(newKey.length + 1));\n        wouldBePosition = \"$set[\".concat(newKey, \"]\");\n      } else {\n        var lastPart2 = (0, _utility.getLastPartOfKey)(fieldName, parentPath);\n        var lastPartWithBraces2 = lastPart2.replace(/\\./g, '][');\n        wouldBePosition = \"\".concat(position.slice(0, position.lastIndexOf('[')), \"[\").concat(lastPartWithBraces2, \"]\");\n      }\n\n      if (!positions.find(function (i) {\n        return i.position === wouldBePosition;\n      })) {\n        positions.push({\n          key: _mongoObject.default._positionToKey(wouldBePosition),\n          value: undefined,\n          operator: operator ? '$set' : null,\n          position: wouldBePosition\n        });\n      }\n    });\n  }\n\n  return positions;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/oneq-account/oneq-prod/node_modules/simpl-schema/dist/clean/getPositionsForAutoValue.js"],"names":["Object","defineProperty","exports","value","default","getPositionsForAutoValue","_mongoObject","_interopRequireDefault","require","_utility","obj","__esModule","_ref","fieldName","isModifier","mongoObject","positions","getPositionsInfoForGenericKey","getPositionsThatCreateGenericKey","length","indexOf","push","key","undefined","operator","position","concat","parentPath","getParentOfKey","lastPart","getLastPartOfKey","lastPartWithBraces","replace","parentPositions","forEach","info","childPosition","find","i","slice","wouldBePosition","next","nextPieces","split","newPieces","newKey","shift","join","lastPart2","lastPartWithBraces2","lastIndexOf","_positionToKey","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getPositionsForAutoValue;\n\nvar _mongoObject = _interopRequireDefault(require(\"mongo-object\"));\n\nvar _utility = require(\"../utility\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A position is a place in the object where this field exists.\n * If no arrays are involved, then every field/key has at most 1 position.\n * If arrays are involved, then a field could have potentially unlimited positions.\n *\n * For example, the key 'a.b.$.c` would have these positions:\n *   `a[b][0][c]`\n *   `a[b][1][c]`\n *   `a[b][2][c]`\n *\n * For this object:\n * {\n *   a: {\n *     b: [\n *       { c: 1 },\n *       { c: 1 },\n *       { c: 1 },\n *     ],\n *   },\n * }\n *\n * To make matters more complicated, we want to include not only the existing positions\n * but also the positions that might exist due to their parent object existing or their\n * parent object being auto-created by a MongoDB modifier that implies it.\n */\nfunction getPositionsForAutoValue(_ref) {\n  var fieldName = _ref.fieldName,\n      isModifier = _ref.isModifier,\n      mongoObject = _ref.mongoObject;\n  // Positions for this field\n  var positions = mongoObject.getPositionsInfoForGenericKey(fieldName); // If the field is an object and will be created by MongoDB,\n  // we don't need (and can't have) a value for it\n\n  if (isModifier && mongoObject.getPositionsThatCreateGenericKey(fieldName).length > 0) {\n    return positions;\n  } // For simple top-level fields, just add an undefined would-be position\n  // if there isn't a real position.\n\n\n  if (fieldName.indexOf('.') === -1 && positions.length === 0) {\n    positions.push({\n      key: fieldName,\n      value: undefined,\n      operator: isModifier ? '$set' : null,\n      position: isModifier ? \"$set[\".concat(fieldName, \"]\") : fieldName\n    });\n    return positions;\n  }\n\n  var parentPath = (0, _utility.getParentOfKey)(fieldName);\n  var lastPart = (0, _utility.getLastPartOfKey)(fieldName, parentPath);\n  var lastPartWithBraces = lastPart.replace(/\\./g, '][');\n  var parentPositions = mongoObject.getPositionsInfoForGenericKey(parentPath);\n\n  if (parentPositions.length) {\n    parentPositions.forEach(function (info) {\n      var childPosition = \"\".concat(info.position, \"[\").concat(lastPartWithBraces, \"]\");\n\n      if (!positions.find(function (i) {\n        return i.position === childPosition;\n      })) {\n        positions.push({\n          key: \"\".concat(info.key, \".\").concat(lastPart),\n          value: undefined,\n          operator: info.operator,\n          position: childPosition\n        });\n      }\n    });\n  } else if (parentPath.slice(-2) !== '.$') {\n    // positions that will create parentPath\n    mongoObject.getPositionsThatCreateGenericKey(parentPath).forEach(function (info) {\n      var operator = info.operator,\n          position = info.position;\n      var wouldBePosition;\n\n      if (operator) {\n        var next = position.slice(position.indexOf('[') + 1, position.indexOf(']'));\n        var nextPieces = next.split('.');\n        var newPieces = [];\n        var newKey;\n\n        while (nextPieces.length && newKey !== parentPath) {\n          newPieces.push(nextPieces.shift());\n          newKey = newPieces.join('.');\n        }\n\n        newKey = \"\".concat(newKey, \".\").concat(fieldName.slice(newKey.length + 1));\n        wouldBePosition = \"$set[\".concat(newKey, \"]\");\n      } else {\n        var lastPart2 = (0, _utility.getLastPartOfKey)(fieldName, parentPath);\n        var lastPartWithBraces2 = lastPart2.replace(/\\./g, '][');\n        wouldBePosition = \"\".concat(position.slice(0, position.lastIndexOf('[')), \"[\").concat(lastPartWithBraces2, \"]\");\n      }\n\n      if (!positions.find(function (i) {\n        return i.position === wouldBePosition;\n      })) {\n        positions.push({\n          key: _mongoObject.default._positionToKey(wouldBePosition),\n          value: undefined,\n          operator: operator ? '$set' : null,\n          position: wouldBePosition\n        });\n      }\n    });\n  }\n\n  return positions;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}