{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _mongoObject = _interopRequireDefault(require(\"mongo-object\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Clones a schema object, expanding shorthand as it does it.\n */\n\n\nfunction expandShorthand(schema) {\n  var schemaClone = {};\n  Object.keys(schema).forEach(function (key) {\n    var definition = schema[key]; // CASE 1: Not shorthand. Just clone\n\n    if (_mongoObject.default.isBasicObject(definition)) {\n      schemaClone[key] = _objectSpread({}, definition);\n      return;\n    } // CASE 2: The definition is an array of some type\n\n\n    if (Array.isArray(definition)) {\n      if (Array.isArray(definition[0])) {\n        throw new Error(\"Array shorthand may only be used to one level of depth (\".concat(key, \")\"));\n      }\n\n      var type = definition[0];\n      schemaClone[key] = {\n        type: Array\n      }; // Also add the item key definition\n\n      var itemKey = \"\".concat(key, \".$\");\n\n      if (schema[itemKey]) {\n        throw new Error(\"Array shorthand used for \".concat(key, \" field but \").concat(key, \".$ key is already in the schema\"));\n      }\n\n      if (type instanceof RegExp) {\n        schemaClone[itemKey] = {\n          type: String,\n          regEx: type\n        };\n      } else {\n        schemaClone[itemKey] = {\n          type: type\n        };\n      }\n\n      return;\n    } // CASE 3: The definition is a regular expression\n\n\n    if (definition instanceof RegExp) {\n      schemaClone[key] = {\n        type: String,\n        regEx: definition\n      };\n      return;\n    } // CASE 4: The definition is something, a type\n\n\n    schemaClone[key] = {\n      type: definition\n    };\n  });\n  return schemaClone;\n}\n\nvar _default = expandShorthand;\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/joshisj/IdeaProjects/myaccount/scratch/node_modules/simpl-schema/dist/expandShorthand.js"],"names":["Object","defineProperty","exports","value","default","_mongoObject","_interopRequireDefault","require","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","expandShorthand","schema","schemaClone","definition","isBasicObject","Array","isArray","Error","concat","type","itemKey","RegExp","String","regEx","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _mongoObject = _interopRequireDefault(require(\"mongo-object\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Clones a schema object, expanding shorthand as it does it.\n */\nfunction expandShorthand(schema) {\n  var schemaClone = {};\n  Object.keys(schema).forEach(function (key) {\n    var definition = schema[key]; // CASE 1: Not shorthand. Just clone\n\n    if (_mongoObject.default.isBasicObject(definition)) {\n      schemaClone[key] = _objectSpread({}, definition);\n      return;\n    } // CASE 2: The definition is an array of some type\n\n\n    if (Array.isArray(definition)) {\n      if (Array.isArray(definition[0])) {\n        throw new Error(\"Array shorthand may only be used to one level of depth (\".concat(key, \")\"));\n      }\n\n      var type = definition[0];\n      schemaClone[key] = {\n        type: Array\n      }; // Also add the item key definition\n\n      var itemKey = \"\".concat(key, \".$\");\n\n      if (schema[itemKey]) {\n        throw new Error(\"Array shorthand used for \".concat(key, \" field but \").concat(key, \".$ key is already in the schema\"));\n      }\n\n      if (type instanceof RegExp) {\n        schemaClone[itemKey] = {\n          type: String,\n          regEx: type\n        };\n      } else {\n        schemaClone[itemKey] = {\n          type: type\n        };\n      }\n\n      return;\n    } // CASE 3: The definition is a regular expression\n\n\n    if (definition instanceof RegExp) {\n      schemaClone[key] = {\n        type: String,\n        regEx: definition\n      };\n      return;\n    } // CASE 4: The definition is something, a type\n\n\n    schemaClone[key] = {\n      type: definition\n    };\n  });\n  return schemaClone;\n}\n\nvar _default = expandShorthand;\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}